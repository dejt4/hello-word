{
  "openapi": "3.0.1",
  "info": {
    "title": "PortalGateway.RPB.Web",
    "version": "2.94.0-fbrpb1brzregulations+2691.d0e59afa6faf2a2a8e8bdd1740d0853b6b99fda0"
  },
  "paths": {
    "/api/portal/v1/balance": {
      "get": {
        "tags": [
          "Balance"
        ],
        "summary": "Get player balance",
        "description": "# Get balance\r\nThe method returns the players balance for multiple wallets.\r\n\r\n# Errors\r\n\r\nError code                    | Description\r\n----------------------------  | -----------\r\n`PlayerSessionCheckFailed`    | Checking player session failed.\r\n`PlayerNotFound`              | Player not found.\r\n`InternalError`               | Internal error.",
        "parameters": [
          {
            "name": "IncludeBonusProductType",
            "in": "query",
            "description": "Include bonus per product type in response.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get balance": {
                "value": "true"
              }
            }
          },
          {
            "name": "IncludeBonusType",
            "in": "query",
            "description": "Include bonus type in response.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get balance": {
                "value": "true"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns players Balance with all his accounts and `RecordCount` (`int`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BalanceController.GetBalance",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 5000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/balance/transactions": {
      "post": {
        "tags": [
          "Balance"
        ],
        "summary": "Call provides all player transactions in provided date.",
        "description": "# Player transaction\r\nCall provides all player transactions in provided date.\r\n\r\n# Errors\r\n\r\nError code                    | Description\r\n----------------------------  | -----------\r\n`PlayerSessionCheckFailed`    | Checking player session failed.\r\n`InternalError`               | Internal error.",
        "requestBody": {
          "description": "Transaction request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlayerTransactionsRequest"
              },
              "examples": {
                "Get Player Transactions": {
                  "value": {"withManualTransactions":true,"retrieveChildTransactions":true,"fromDate":"2024-01-22T10:01:00.1017457+00:00","toDate":"2025-01-23T10:01:00.1017498+00:00","pageSize":10,"pageNumber":1,"transactionType":"Deposit"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of players transaction, `recordCount` (`int`) and `recordsLimitExceeded` (`bool`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlayerTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BalanceController.PlayerTransactions",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 10000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/balance/transaction-details": {
      "post": {
        "tags": [
          "Balance"
        ],
        "summary": "Transaction details",
        "description": "# Transaction details\r\n            \r\nReturns transaction details information\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError `            | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionDetailsRequest"
              },
              "examples": {
                "Example with random GUID": {
                  "value": {"referenceObject":"0d2d21c9-71ef-4bc1-8e1d-56f58c29347e"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.RPB, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.CustomerSpecific.RPB.Controllers.PlayerPortalFacadeControllers.RPB.Controllers.v1.BalanceController.TransactionDetails",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 15000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/cms/banners": {
      "get": {
        "tags": [
          "Banner"
        ],
        "summary": "Get banners",
        "description": "# Get banners\r\nThe method will return list of banners.\r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "Slugs",
            "in": "query",
            "description": "Category key list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PortalId",
            "in": "query",
            "description": "Portal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get banners request": {
                "value": "3"
              }
            }
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "Language code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get banners request": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of banners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "CMS.Api.Controllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.CMS.CMS.Api.Controllers.v1.BannerController.GetBanners"
      }
    },
    "/api/portal/v1/cms/player/banners": {
      "get": {
        "tags": [
          "Banner"
        ],
        "summary": "Get player banners",
        "description": "# Get banners\r\nThe method will return list of banners.\r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "Slugs",
            "in": "query",
            "description": "Category key list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PortalId",
            "in": "query",
            "description": "Portal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get player banners request": {
                "value": "3"
              }
            }
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "Language code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get player banners request": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of banners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContentData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "CMS.Api.Controllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.CMS.CMS.Api.Controllers.v1.BannerController.GetPlayerBanners",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get player bonuses history",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InvalidPlayerBonusStatus`  | Provided player bonus status is invalid\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "BonusType",
            "in": "query",
            "description": "Name of bonus type. If undefined, all bonus types are selected.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get all bonuses:": {
                "value": ""
              },
              "Get casino bonuses with statuses 0, 1, 3": {
                "value": "Casino"
              }
            }
          },
          {
            "name": "IncludeAwardConditionFulfilment",
            "in": "query",
            "description": "Flag to include bonus awarding data. Default value is false.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all bonuses:": {
                "value": "True"
              },
              "Get casino bonuses with statuses 0, 1, 3": {
                "value": "False"
              }
            }
          },
          {
            "name": "PlayerBonusStatuses",
            "in": "query",
            "description": "Comma separated status IDs. Default value is null (all statuses).",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get all bonuses:": {
                "value": ""
              },
              "Get casino bonuses with statuses 0, 1, 3": {
                "value": "0, 1, 3"
              }
            }
          },
          {
            "name": "IncludeCustomContent",
            "in": "query",
            "description": "Flag to include list of custom content for each Promotion. Default value is false.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all bonuses:": {
                "value": "True"
              },
              "Get casino bonuses with statuses 0, 1, 3": {
                "value": "False"
              }
            }
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "If Custom Content should be returned it will return all custom content for the specified language including content for _ANY_ language.\r\nIf language is not present in the request it will return the custom content from player’s registration language. If registration language does not exist, it will return the content for the default system language. If custom content for default system language does not exist, then only content for _ANY_ language is present.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get all bonuses:": {
                "value": ""
              },
              "Get casino bonuses with statuses 0, 1, 3": {
                "value": "en-US"
              }
            }
          },
          {
            "name": "IncludeHistory",
            "in": "query",
            "description": "Flag to also include player bonuses from history table (player bonuses in final state and older than 2 weeks). Default value is true (configurable - BonusMgmt.GetPlayerBonuses.DefaultIncludeHistory).",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all bonuses:": {
                "value": "True"
              },
              "Get casino bonuses with statuses 0, 1, 3": {
                "value": "True"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player bonusing history and details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBonusResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetBonus",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInCode",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptOutPlayer",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInCodeWithPlayerPromotions",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.PromotionsCouponCode",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.DeclinePlayerBonusContext",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.AcceptMultiChoiceBonus",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.DeclineMultiChoiceBonus",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.AcceptWithdrawalRequestBonus",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.CreateDeposit"
        ]
      }
    },
    "/api/portal/v1/bonus/player/promotions": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get list of player promotions",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "Language code defines in what language the friendly name shall be returned.\r\nIf missing, default friendly name is returned.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get all opted out promotions for player on brand 2:": {
                "value": "en-GB"
              },
              "Get all opted in promotions for player on brand 4:": {
                "value": "en-US"
              }
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "description": "Brand Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get all opted out promotions for player on brand 2:": {
                "value": "2"
              },
              "Get all opted in promotions for player on brand 4:": {
                "value": "4"
              }
            }
          },
          {
            "name": "IncludeCustomContent",
            "in": "query",
            "description": "Flag to include list of custom content for each Promotion.\r\nDefault value is false.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all opted out promotions for player on brand 2:": {
                "value": "True"
              },
              "Get all opted in promotions for player on brand 4:": {
                "value": "True"
              }
            }
          },
          {
            "name": "OptedIn",
            "in": "query",
            "description": "Filter by opted-in status.",
            "schema": {
              "$ref": "#/components/schemas/OptedInEnum"
            },
            "examples": {
              "Get all opted out promotions for player on brand 2:": {
                "value": "AllPromotions"
              },
              "Get all opted in promotions for player on brand 4:": {
                "value": "OptedInPromotions"
              }
            }
          },
          {
            "name": "MultiChoiceBonus",
            "in": "query",
            "description": "Multi choice bonus.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeHistory",
            "in": "query",
            "description": "Flag to also include player bonuses from history table (player bonuses in final state and older than 2 weeks). Default value is true (configurable - BonusMgmt.GetPlayerBonuses.DefaultIncludeHistory).",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all opted out promotions for player on brand 2:": {
                "value": "True"
              },
              "Get all opted in promotions for player on brand 4:": {
                "value": "True"
              }
            }
          },
          {
            "name": "ExcludeFuturePromotions",
            "in": "query",
            "description": "Exclude future promotions. Default value is false.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all opted out promotions for player on brand 2:": {
                "value": "False"
              },
              "Get all opted in promotions for player on brand 4:": {
                "value": "False"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of promotions for authenticated players.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetListOfPlayerPromotions",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInCode",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptOutPlayer",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInCodeWithPlayerPromotions",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.PromotionsCouponCode",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.CreateDeposit"
        ]
      }
    },
    "/api/portal/v1/bonus/promotions": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get list of promotions",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "Language code defines in what language the friendly name shall be returned.\r\nIf missing, default friendly name is returned.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get all promotions on brand 2:": {
                "value": "en-GB"
              },
              "Get all promotions on brand 4:": {
                "value": "en-US"
              }
            }
          },
          {
            "name": "BrandId",
            "in": "query",
            "description": "For which brand Id promotions shall be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get all promotions on brand 2:": {
                "value": "2"
              },
              "Get all promotions on brand 4:": {
                "value": "4"
              }
            }
          },
          {
            "name": "IncludeCustomContent",
            "in": "query",
            "description": "Flag to include list of custom content for each Promotion.\r\nDefault value is false.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all promotions on brand 2:": {
                "value": "True"
              },
              "Get all promotions on brand 4:": {
                "value": "True"
              }
            }
          },
          {
            "name": "ExcludeFuturePromotions",
            "in": "query",
            "description": "Exclude future promotions. Default value is false.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get all promotions on brand 2:": {
                "value": "False"
              },
              "Get all promotions on brand 4:": {
                "value": "False"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of promotions for unauthenticated players.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetListOfPromotions",
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/bonus/opt-in": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Bonus opt-in",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error\r\n`CouponNotFound`            | Coupon code not found\r\n`CouponExists`              | Coupon already added",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsOptInRequest"
              },
              "examples": {
                "Opt in to promotion 5079:": {
                  "value": {"optInCode":"AutoOptCodeSB55224","promotionId":5079,"eligibilityCheckForPromotionBonusesOnly":false}
                },
                "Opt in to promotion 5000:": {
                  "value": {"optInCode":"fef-dfersdf22","promotionId":5000,"eligibilityCheckForPromotionBonusesOnly":false}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opt-in code for player and return success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInCode",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/opt-out": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Player opt-out",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error\r\n`PromotionNotFound`         | Promotion not found\r\n`CouponEventNotFound`       | Coupon event not found",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsOptOutRequest"
              },
              "examples": {
                "Opt out:": {
                  "value": {"couponEventId":5353,"promotionId":312313,"declineAllRelatedBonuses":false}
                },
                "Opt out and decline all bonuses:": {
                  "value": {"couponEventId":4234,"promotionId":5000,"declineAllRelatedBonuses":true}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opt-out player and return success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptOutPlayer",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/opt-in/with-promotions": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Player Opt-in with Player Promotions",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error\r\n`CouponNotFound`            | Coupon code not found\r\n`CouponExists`              | Coupon already added",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOptInCodeWithPlayerPromotionsRequest"
              },
              "examples": {
                "Opt in to promotion 5079:": {
                  "value": {"optInCode":"AutoOptCodeSB55224","promotionId":5079,"languageCode":"en-US","brandId":2,"includeCustomContent":true,"optedIn":"AllPromotions","multiChoiceBonus":false,"eligibilityCheckForPromotionBonusesOnly":false,"includeHistory":true}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opt-in player and returns list of promotions for provided player.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInCodeWithPlayerPromotions",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/free-spin-games": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get List Of Player Free Spin Games",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "GameChannelName",
            "in": "query",
            "description": "Game channel name",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Mobile freespins:": {
                "value": "Mobile"
              },
              "Desktop freespins:": {
                "value": "Desktop"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of current player free spin games.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableFreeSpinGamesModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetPlayerCurrentFreeSpinGames",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/expire-on-withdrawal": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get bonuses to expire on withdrawal",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error",
        "responses": {
          "200": {
            "description": "Returns list of bonuses to expire if the player will make a withdrawal request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerBonusInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetListOfBonusesToExpireOnWithdrawal",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/promotion-coupon": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Add Promotions Coupon Code",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`InternalError`             | Internal error\r\n`CouponNotFound`            | Coupon code not found\r\n`CouponExists`              | Coupon already added",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionsCouponCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add promotions code for player and return success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.PromotionsCouponCode",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/decline": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Decline player bonus context",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`InternalError`                   | Internal error\r\n`PlayerBonusContextDoesNotExists` | Player bonus not found",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclinePlayerBonusContextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Decline player bonus and return success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.DeclinePlayerBonusContext",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/multi-choice": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get list of player multi-choice bonuses",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "parameters": [
          {
            "name": "BonusGroupId",
            "in": "query",
            "description": "Bonus group ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MultiChoiceSelected",
            "in": "query",
            "description": "Multi-choice selected",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Locale",
            "in": "query",
            "description": "Locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns bonuses that belong to a multi-choice bonus group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiChoiceBonusInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetMultiChoiceBonuses",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/multi-choice/content": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get player multi-choice bonus with additional data",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "parameters": [
          {
            "name": "BonusIncentiveId",
            "in": "query",
            "description": "Bonus Incentive ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Locale",
            "in": "query",
            "description": "Locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns additional bonus multi-choice data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiChoiceBonusInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetBonusContent",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/multi-choice/accept": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Award one multi-choice bonus and decline all others in selected bonus group",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error\r\n`PlayerBonusContextDoesNotExists` | Unknown error occured",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptMultiChoiceBonusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success status"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.AcceptMultiChoiceBonus",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/multi-choice/decline": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Decline Multi-Choice Bonus",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineMultiChoiceBonusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success status"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.DeclineMultiChoiceBonus",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/multi-choice/groups": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get Multi-Choice Bonus Groups",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "parameters": [
          {
            "name": "MultiChoiceSelected",
            "in": "query",
            "description": "Multi-choice selected",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of bonus group IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetMultiChoiceBonusGroups",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/withdrawal-requests": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get Withdrawal Request Bonuses",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "parameters": [
          {
            "name": "Locale",
            "in": "query",
            "description": "Locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of `Withdrawal Request` bonuses in waiting status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WithdrawalRequestBonusInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetWithdrawalRequestBonuses",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/withdrawal-request/accept": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Accept Withdrawal Request Bonus",
        "description": "# Errors\r\n\r\nError code                             | Description\r\n---------------------------------------| -----------\r\n`PlayerSessionCheckFailed`             | Checking player session failed\r\n`Security`                             | Player Id and Secure Token mismatch\r\n`PlayerBonusContextDoesNotExists`      | No player bonus context exists for player\r\n`PlayerBonusIncentiveCanNotBeAccepted` | Player bonus context can not be accepted\r\n`NoWaitingBonusesWithinBonusGroup`     | No waiting bonuses within bonus group\r\n`ErrorAwardBonus`                      | Error award bonus : playerId:_, bonusId:_",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptWithdrawalRequestBonusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success status"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.AcceptWithdrawalRequestBonus",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/opt-in-to-bonus": {
      "post": {
        "tags": [
          "Bonus"
        ],
        "summary": "Accept Optin to bonus request",
        "description": "# Accept Optin to bonus request\r\nThe method Opt in player to bonus\r\n# Errors\r\n\r\nError code                             | Description\r\n---------------------------------------| -----------\r\n`PlayerSessionCheckFailed`             | Checking player session failed\r\n`Security`                             | Player Id and Secure Token mismatch\r\n`PlayerBonusContextDoesNotExists`      | No player bonus context exists for player",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptInToBonusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success status"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.OptInToBonus",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/bonus/bonuses-available-for-opt-in": {
      "get": {
        "tags": [
          "Bonus"
        ],
        "summary": "Get Available Bonuses For Opt In Request",
        "description": "# Get Available Bonuses For Opt In Request\r\nThe method returns available bonuses for Opt In.\r\n# Errors\r\n\r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "responses": {
          "200": {
            "description": "Returns list of `Bonuses Available For Opt In`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBonusesAvailableForOptInReturn"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.BonusController.GetBonusesAvailableForOptIn",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/config/portal": { },
    "/api/portal/v1/globalization/countries": {
      "get": {
        "tags": [
          "Globalization"
        ],
        "summary": "Get countries",
        "description": "# Get countries\r\n\r\nReturns a list of non-banned countries.\r\n\r\n# Errors\r\n\r\nError code        | Description\r\n----------------- | -----------\r\n`PortalNotActive` | Portal is not active.\r\n`PortalNotExist`  | Portal does not exist.\r\n`InternalError`   | Internal error",
        "parameters": [
          {
            "name": "portalId",
            "in": "query",
            "description": "The `portalId` for which to return the data. If `portalId` is omitted or `0`, all non-banned contries will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of non-banned countries per `portalId`. If `portalId` is omitted or `0` return all non-banned contries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.GlobalizationController.GetCountries",
        "x-cache-enabled": true,
        "x-cache-type": "Local",
        "x-cache-soft-timeout-milis": 600000,
        "x-cache-hard-timeout-milis": 3000000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/globalization/currencies/{portalId}": {
      "get": {
        "tags": [
          "Globalization"
        ],
        "summary": "Get currencies",
        "description": "# Get currencies\r\n\r\nReturns a list of currencies, supported by the given `portalId`.\r\n\r\n# Errors\r\n\r\nError code        | Description\r\n----------------- | -----------\r\n`PortalNotActive` | Portal is not active.\r\n`PortalNotExist`  | Portal does not exist.\r\n`InternalError`   | Internal error",
        "parameters": [
          {
            "name": "portalId",
            "in": "path",
            "description": "The `portalId` for which to return the data.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of currencies, supported by the given `portalId`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.GlobalizationController.GetCurrencies",
        "x-cache-enabled": true,
        "x-cache-type": "Local",
        "x-cache-soft-timeout-milis": 600000,
        "x-cache-hard-timeout-milis": 3000000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/globalization/contact-info-types": {
      "get": {
        "tags": [
          "Globalization"
        ],
        "summary": "Get contact info types",
        "description": "# Get contact info types\r\nThe method gets all contact info types.\r\n\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Returns a list of contact infos and `RecordCount` (`int`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContactInfoTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.GlobalizationController.GetContactInfoTypes",
        "x-cache-enabled": true,
        "x-cache-type": "Local",
        "x-cache-soft-timeout-milis": 600000,
        "x-cache-hard-timeout-milis": 3000000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/globalization/titles": {
      "get": {
        "tags": [
          "Globalization"
        ],
        "summary": "Get titles",
        "description": "# Get titles\r\nMethod returns list of all  titles.\r\n\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Returns a list of all  titles and `RecordCount` (`int`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTitlesResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.GlobalizationController.Title",
        "x-cache-enabled": true,
        "x-cache-type": "Local",
        "x-cache-soft-timeout-milis": 600000,
        "x-cache-hard-timeout-milis": 3000000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/globalization/secret-questions": {
      "get": {
        "tags": [
          "Globalization"
        ],
        "summary": "Get secret questions",
        "description": "# Secret question\r\n\r\nThe method will show secret questions.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "ExcludeInactive",
            "in": "query",
            "description": "Exclude inactive secret questions",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all list of secret questions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSecretQuestionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.GlobalizationController.SecretQuestion",
        "x-cache-enabled": true,
        "x-cache-type": "Local",
        "x-cache-soft-timeout-milis": 600000,
        "x-cache-hard-timeout-milis": 3000000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/loyalty/points": {
      "post": {
        "tags": [
          "Loyalty"
        ],
        "summary": "Redeem Loyalty Points",
        "description": "# Redeem loyalty points\r\n\r\nThe method redeems loyalty points for player.\r\n \r\n# Errors\r\n  \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`PlayerSessionCheckFailed`          | Checking player session failed.\r\n`InternalError`                     | Internal error.\r\n`PointsLessThanZero `               | Loyalty points less than zero.\r\n`NotEnoughPoints`                   | Not enough points to redeem.\r\n`BlockedRedemption`                 | Player blocked for redeeming points.\r\n`RedeemLoyaltyPointsLimitExceeded`  | Points redemption limit exceeded.",
        "requestBody": {
          "description": "Redeem loyalty points request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedeemLoyaltyPointsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Redeems loyalty points for player and returns success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.LoyaltyController.RedeemLoyaltyPoints",
        "x-authorization-required": true
      },
      "get": {
        "tags": [
          "Loyalty"
        ],
        "summary": "Points transactions redeemed",
        "description": "# Redeem points transactions\r\n\r\nThe method returns the history of players' loyalty transactions (redeemed market points).    \r\n\r\n# Errors\r\n  \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`PlayerSessionCheckFailed`          | Checking player session failed.\r\n`InternalError`                     | Internal error.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Number of the page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Redeem points transactions": {
                "value": "1"
              }
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size for the number of records per page.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Redeem points transactions": {
                "value": "10"
              }
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "description": "Start date for redeemed points transactions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "examples": {
              "Redeem points transactions": {
                "value": "01/22/2004 10:01:00 +00:00"
              }
            }
          },
          {
            "name": "DateTo",
            "in": "query",
            "description": "End date for redeemed points transactions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "examples": {
              "Redeem points transactions": {
                "value": "01/23/2025 10:01:00 +00:00"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a transaction history with players' redeemed market points and the number of records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedeemedPointsTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.LoyaltyController.RedeemedPointsTransactions",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.LoyaltyController.RedeemLoyaltyPoints"
        ]
      }
    },
    "/api/portal/v1/loyalty": {
      "get": {
        "tags": [
          "Loyalty"
        ],
        "summary": "Loyalty detail",
        "description": "# Loyalty details\r\n\r\nThe method returns all players loyalty details.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Returns players loyalty details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.LoyaltyController.LoyaltyDetail",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.LoyaltyController.RedeemLoyaltyPoints"
        ]
      }
    },
    "/api/portal/v1/message/unread-count": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Number of unread messages",
        "description": "# Get unread messages count \r\n\r\nThe method will get count of all unread messages.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Returns `UnreadCount` (`int`) and `UnreadPopupCount` (`int`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnreadMessagesCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.GetUnreadMessagesCount",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.HandleMessage",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.ChangeMessageStatus",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.DeleteMessage"
        ]
      }
    },
    "/api/portal/v1/message/{MessageId}": {
      "delete": {
        "tags": [
          "Message"
        ],
        "summary": "Delete message by id",
        "description": "# Delete message\r\n\r\nThe method will delete a message by id\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`MessageIsNotOwned`         | The message id does not exist.\r\n`MissingMandatoryField`     | Missing mandatory request parameter.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "MessageId",
            "in": "path",
            "description": "Message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete message and returns success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.DeleteMessage",
        "x-authorization-required": true
      },
      "put": {
        "tags": [
          "Message"
        ],
        "summary": "Set or reset, the message status to read/unread",
        "description": "# Change message status\r\n\r\nThe method will set or reset the message status to read or unread.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "MessageId",
            "in": "path",
            "description": "Message id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "description": "Message type to change message to read or unread",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChangeMessageTypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Marks message read/unread and returns success flag."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.ChangeMessageStatus",
        "x-authorization-required": true
      },
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get message according to the id",
        "description": "# Get message\r\n\r\nThe method will retrieve the message according to the entered id\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "MessageId",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the message details according to the id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.GetMessage",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/messages": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get all messages from a player",
        "description": "# Get messages\r\n\r\nThe method will get all messages from a player.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`MissingMandatoryField`     | Missing mandatory request parameter.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "PageSize",
            "in": "query",
            "description": "Number of entries on page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Basic messages request": {
                "value": "10"
              }
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Number of the page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Basic messages request": {
                "value": "1"
              }
            }
          },
          {
            "name": "DescendingOrder",
            "in": "query",
            "description": "Order results descending",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all messages and the number of returned records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.GetMessages",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.HandleMessage",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.ChangeMessageStatus",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.DeleteMessage"
        ]
      }
    },
    "/api/portal/v1/message/popups": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get the popup messages",
        "description": "# Get popups\r\nThe method gets all pop-up messages and requires immediate attention or action by the players.\r\n\r\nIf the method is called,  the player workflow must be interrupted and the workflow can only be resumed after the player's actions.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "SkipDynamic",
            "in": "query",
            "description": "Skip dynamic",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of popup messages and `RecordCount` (`int`).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPopupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.GetPopups",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.HandleMessage",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.ChangeMessageStatus",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.DeleteMessage"
        ]
      }
    },
    "/api/portal/v1/message/handle/{ActionId}": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Handle message according to the id",
        "description": "# Handle message\r\n\r\nThe method will handle a message according to the action id.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`ProcessActionFailed`       | Process action failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "ActionId",
            "in": "path",
            "description": "Action id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success flag indicating action success."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.MessageController.HandleMessage",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/deposit": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create a deposit",
        "description": "# Create deposit\r\n\r\nThe method will create a deposit request.\r\n\r\n# Errors\r\n  \r\nError code                                          | Description\r\n--------------------------------------------------- | -----------\r\n`PlayerNotFound `                                   | Player not found.\r\n`ExternalProviderError `                            | Deposit failed on external provider side.\r\n`ExternalPaymentProviderMissingRequiredParameters`  | Parameters needed for communication with the external provider are missing or incorrect.\r\n`ExternalPaymentProviderInvalidRequest`             | The request was not valid – incorrect parameters.\r\n`InternalPlayerNotAllowed`                          | Player is internal and has payments disabled.\r\n`PlayerSessionCheckFailed`                          | Checking player session failed.\r\n`InternalError`                                     | Internal error.",
        "requestBody": {
          "description": "Payment request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              },
              "examples": {
                "Create deposit": {
                  "value": {"productId":1,"paymentInstrumentId":1,"paymentInstrumentType":"Card","paymentAccountId":1,"paymentProviderId":null,"bonusCode":"string","amount":10,"currency":"USD","deviceFingerprint":"string","parameters":{},"testMode":true}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates a deposit and returns `CreatePaymentReturn` that contains the information about the created deposit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.CreateDeposit",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/withdrawal/cancel": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Cancel withdrawal transaction",
        "description": "# Cancel withdrawal\r\n\r\nThe method cancels existing withdrawal transaction.\r\n\r\n# Errors\r\n  \r\nError code                              | Description\r\n--------------------------------------- | -----------\r\n`PlayerNotFound `                       | Player not found.\r\n`ExternalProviderError `                | Deposit failed on external provider side.\r\n`PaymentTransactionNotFound`            | Transaction was not found.\r\n`TransactionActionNotAllowedForType`    | Cancel is not allowed for this transaction type – its not a withdrawal.\r\n`TransactionActionNotAllowedForStatus`  | Cancel is not allowed for the transaction status.\r\n`PlayerSessionCheckFailed`              | Checking player session failed.\r\n`InternalError`                         | Internal error.",
        "requestBody": {
          "description": "Cancel withdrawal request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelWithdrawalRequest"
              },
              "examples": {
                "Cancel withdrawal transaction": {
                  "value": {"transactionId":"7u612b9f-i5dt-4z10-a99e-b45ce89hia28","cancelReason":"testing","testMode":true}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancels a pending withdrawal and returns the `PaymentStatus` (`string`), `TransactionId` (`string`), `ExternalErrorCode` (`string`) and `ExternalErrorMessage` (`string`) .",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelWithdrawalResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.CancelWithdrawal",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/withdrawal": { },
    "/api/portal/v1/payment/withdrawal/parameters": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get all withdrawal eligibility parameters",
        "description": "# Withdrawal eligibility parameters\r\n\r\nThis method returns all player’s withdrawal eligibility parameters.\r\n\r\nTo return `WithdrawalFees` parameters, this needs to be configured and enabled in iCore.\r\n\r\n# Errors\r\n  \r\nError code                   | Description\r\n---------------------------- | -----------\r\n`PlayerSessionCheckFailed`   | Checking player session failed.\r\n`InternalError`              | Internal error.",
        "responses": {
          "200": {
            "description": "Retrieves withdrawal eligibility parameters for the given player.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalEligibilityParametersResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.WithdrawalEligibilityParameters",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/instruments": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get all available payment instruments",
        "description": "# Available payment instruments\r\n\r\nThis method returns all available payment instruments that the current player has.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerNotFound`            | Player not found.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Returns a list of all available payment instruments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentsDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.GetAvailablePaymentInstruments",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/providers": { },
    "/api/portal/v1/payment/accounts/filtered": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get filtered players payment accounts.",
        "description": "# Filtered Payment Accounts\r\n\r\nLists all payment accounts for the player that can be used for performing deposits and withdrawals. The payment accounts are sorted by LastUsedTime from last used to those having this value null.\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerNotFound`            | Player not found.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "PaymentInstrumentType",
            "in": "query",
            "description": "Available Payment Accounts Types",
            "schema": {
              "$ref": "#/components/schemas/PaymentInstrumentTypeEnum"
            },
            "examples": {
              "Get Player Payment Accounts": {
                "value": "Card"
              }
            }
          },
          {
            "name": "OnlyForDeposit",
            "in": "query",
            "description": "Select accounts only for deposits.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get Player Payment Accounts": {
                "value": "False"
              }
            }
          },
          {
            "name": "OnlyForWithdrawal",
            "in": "query",
            "description": "Select accounts only for withdrawals.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get Player Payment Accounts": {
                "value": "False"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all payment accounts for the current player.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentAccount"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.ListFilteredPaymentAccounts",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/account/{accountId}": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Update payment account.",
        "description": "# Success\r\n\r\nUpdates a player payment account identified by paymentAccountId and returns if the update was successful or if it failed.\r\n\r\n# Errors\r\n  \r\nError code                                            | Description\r\n----------------------------------------------------- | -----------\r\n`PlayerNotFound`                                      | Player not found.\r\n`PlayerSessionCheckFailed`                            | Checking player session failed.\r\n`InternalError`                                       | Internal error.\r\n`PaymentInstrumentAccountNotFound`                    | The payment account was not found.\r\n`ExternalProviderError`                               | Payment account creation failed on external provider side.\r\n`ExternalPaymentProviderMissingRequiredParameters\t`   | Parameters needed for communication with the external provider are missing or incorrect.\r\n`ExternalPaymentProviderInvalidRequest`               | The request was not valid – incorrect parameters.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Payment Accounts",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerPaymentAccountRequest"
              },
              "examples": {
                "Get Player Payment Accounts": {
                  "value": {"paymentInstrumentType":"Card","paymentInstrumentId":1,"paymentProviderId":1,"parameters":{"Key":"Value"},"testMode":false}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.UpdatePaymentAccount",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/account/{AccountId}": {
      "delete": {
        "tags": [
          "Payment"
        ],
        "summary": "Delete payment account.",
        "description": "# Success\r\n\r\nRemoves a player payment account identified by paymentAccountId and returns if the removal was successful or if it failed.\r\n\r\n# Errors\r\n  \r\nError code                                            | Description\r\n----------------------------------------------------- | -----------\r\n`PlayerNotFound`                                      | Player not found.\r\n`PlayerSessionCheckFailed`                            | Checking player session failed.\r\n`InternalError`                                       | Internal error.\r\n`PaymentInstrumentAccountNotFound`                    | The payment account was not found.",
        "parameters": [
          {
            "name": "AccountId",
            "in": "path",
            "description": "Payment account id which is to be removed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.RemovePaymentAccount",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/accounts": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get Payment Accounts.",
        "description": "# Success\r\n\r\nLists all payment accounts for the player that can be used for performing deposits and withdrawals.\r\nThe payment accounts are sorted by LastUsedTime from last used to those having this value null.\r\n\r\n# Errors\r\n  \r\nError code                                            | Description\r\n----------------------------------------------------- | -----------\r\n`PlayerNotFound`                                      | Player not found.\r\n`PlayerSessionCheckFailed`                            | Checking player session failed.\r\n`InternalError`                                       | Internal error.",
        "responses": {
          "200": {
            "description": "List of Payment Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentAccount"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.ListPaymentAccounts",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/account": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Add Payment Account.",
        "description": "# Success\r\n\r\nCreates a new payment account for the player (or updates an existing one if the data matches – in case of a bank account if the bank account number already exists) and returns the payment account id.\r\n\r\n# Errors\r\n  \r\nError code                                            | Description\r\n----------------------------------------------------- | -----------\r\n`PlayerNotFound`                                      | Player not found.\r\n`PlayerSessionCheckFailed`                            | Checking player session failed.\r\n`InternalError`                                       | Internal error.\r\n`ExternalPaymentInstrumentNotFound `                  | Payment instrument not supported.\r\n`ExternalProviderError`                               | Payment account creation failed on external provider side.\r\n`ExternalPaymentProviderMissingRequiredParameters\t`   | Parameters needed for communication with the external provider are missing or incorrect.\r\n`ExternalPaymentProviderInvalidRequest`               | The request was not valid – incorrect parameters.",
        "requestBody": {
          "description": "Get Player Payment Accounts Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPaymentAccountRequest"
              },
              "examples": {
                "Add Bank Account": {
                  "value": {"paymentInstrumentType":"BankTransfer","paymentInstrumentId":null,"paymentProviderId":null,"parameters":{"HolderName":"John Doe","BankName":"Test Bank","BankCode":"MALBB","BankId":"123","AccountNumber":"123456789","IBAN":"ID75512108001245126199"},"testMode":true}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment account id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPaymentAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.AddPaymentAccount",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/withdrawal-face-auth": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Withdrawal via face auth",
        "description": "# Player withdrawal via face auth\r\n            \r\nTriggers face auth process for withdrawal.\r\n            \r\nUse withdrawal-face-auth-status method, to check face authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              },
              "examples": {
                "Create deposit": {
                  "value": {"productId":1,"paymentInstrumentId":1,"paymentInstrumentType":"Card","paymentAccountId":1,"paymentProviderId":null,"bonusCode":"string","amount":10,"currency":"USD","deviceFingerprint":"string","parameters":{},"testMode":true}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.WithdrawalFaceAuth",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/payment/withdrawal-face-auth-status": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Withdrawal face authentication process",
        "description": "# Face authentication\r\n            \r\nChecks facial authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawalFaceAuthProcessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithdrawalFaceAuthProcessResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PaymentController.WithdrawalFacialAuthentication",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/login": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Login player",
        "description": "# Errors\r\n            \r\nError code                | Description\r\n------------------------- | -----------\r\n`PrincipalNotFound` \t\t  | Provided principal was not found\r\n`InvalidCredential`\t\t    | Provided credential is invalid\r\n`PlayerAccountError`\t\t  | Player account problem - player not active\r\n`ChangePasswordRequired`\t| Change password is required\r\n`PortalNotActive`\t \t      | Portal is not active\r\n`PortalNotExist`\t\t      | Portal does not exist\r\n`InternalError` \t\t      | Internal error\r\n`PlayerDataNotComplete`\t  | Player data incomplete. Complete Registration is required - use `PlayerToken` Value from response\r\n`PasswordResetRequired`\t  | Reset password was sent to players mail box - email contains forgot password landing page with token\r\n`ChangeUsernameRequired`\t| Change username is required - use `PlayerToken` Value from response",
        "requestBody": {
          "description": "Login request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login User and Returns login data.\r\n            \r\nLogin data contains player popup messages. Each message contains Title, message content(body) and actions.\r\n            \r\nAction is basically a button with action id and Button name - text to be displayed on button. There can be several popup actions (Accept, Decline, Yes, No, Cancel....and others), each of this actions - button has its own ID created by IGS. When player clicks certain button, action - callback should be performed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.Login"
      }
    },
    "/api/portal/v1/player": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Player details",
        "description": "# Get player details\r\n            \r\nThe method will return data for the current player with the exception of custom parameters.\r\n            \r\nThis is the same method as the GET /api/portal/v1/player/Data method with the only difference that it does not return custom parameters (i.e. It always returns NULL on custom parameters, regardless of their actual values).\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerNotFound`            | Player not found.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Return player with players data and details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetPlayerDetails",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.UpdatePlayer",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.UpdatePlayerCustomParameters"
        ]
      }
    },
    "/api/portal/v1/player/logout": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Logout player",
        "description": "# Logout\r\n            \r\nThe method will close the player session on the backend and therefore make the currently supplied JWT invalid for future use.\r\nAfter calling this method, the client must not use the currently supplied JWT for any other future requests.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Player is logged out."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.Logout",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/password/reset": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Changes a player's forgotten password",
        "description": "# Change forgotten password\r\n            \r\nThis method is used by the player to change a forgotten password.\r\n            \r\n**IMPORTANT: client implementation is responsible for assuring password complexity.**\r\n            \r\n`SecureKey` should be received by the player via email after executing `player/password/forgot`\r\n            \r\n# Errors\r\n            \r\nError code                    | Description\r\n----------------------------- | --------------------------------------------------------------------------\r\n`ChangePasswordTokenNotFound` | The secure token, which was supposed to be received via email, is incorrect.\r\n`InternalError`               | Internal error",
        "requestBody": {
          "description": "Change Forgotten Password Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeForgottenPasswordRequest"
              },
              "examples": {
                "ChangeForgottenPassword": {
                  "value": {"secureKey":"secure1234","newPassword":"pass1234"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes the player's password"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ChangeForgottenPassword"
      }
    },
    "/api/portal/v1/player/password/forgot": { },
    "/api/portal/v1/player/forgotpassword-extended": { },
    "/api/portal/v1/player/password/change": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Change Password",
        "description": "# Change players password request\r\n            \r\nThe method will return all the details of the current player.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InvalidOldCred`            | Invalid old credentials provided.\r\n`InternalError`             | Internal error.",
        "requestBody": {
          "description": "Change Player Password Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePlayerPasswordRequest"
              },
              "examples": {
                "ChangeForgottenPassword": {
                  "value": {"oldPassword":"pass1234","newPassword":"pass4567"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return if password was successfully changed"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ChangePlayerPassword",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/close": { },
    "/api/portal/v1/player/limit": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Set player limit",
        "description": "# Set player limits\r\n            \r\nThis method sets new player limit.\r\n            \r\nA player shall be able to set his personal gambling limits on a special “Limits” page or at the “Limits” section of “My account” page.\r\nPlayers shall be able to set the following limits:\r\n- Game Session duration limit,\r\n- Total wager (for the session, day, or week period),\r\n-\tMaximum single bet amount,\r\n-\tTotal lost (for the session, day, or week period),\r\n-\tDeposit limit.\r\n            \r\n# Errors\r\n            \r\nError code                      | Description\r\n------------------------------- | -----------\r\n`PlayerSessionCheckFailed`      | Checking player session failed.\r\n`InvalidLimitData`              | Provided limit data is invalid.\r\n`PlayerNotFound`                | Player not found.\r\n`RGLThresholdLessRestrictive`   | Limit exceeded the maximum limit.\r\n`InternalError`                 | Internal error.",
        "requestBody": {
          "description": "Limit request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPlayerLimitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success status and sets player limit."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.SetPlayerLimit",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/limits": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Get player's limits",
        "description": "# Get player's limits\r\n            \r\nThis method returns a list of all player's limits. For more detailed information, read the response schema.\r\n            \r\n# Errors\r\n            \r\nError code                         | Description\r\n---------------------------------- | -----------\r\n`PlayerSessionCheckFailed`         | Checking player session failed\r\n`PlayerNotFound`                   | Player not found\r\n`InternalError`                    | Internal error",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPlayerLimit"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetPlayerLimits",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/limit/{limitId}": {
      "delete": {
        "tags": [
          "Player"
        ],
        "summary": "Delete Limit",
        "description": "# Delete Limit\r\n            \r\nThis method cancels a player's limit.\r\n            \r\n# Errors\r\n            \r\nError code                                        | Description\r\n------------------------------------------------- | -----------\r\n`PlayerSessionCheckFailed`                        | Checking player session failed.\r\n`CancelPlayLimitFailed`                           | Canceling a player's limit failed.\r\n`PlayerNotFound`                                  | The player was not found\r\n`InternalError`                                   | Close reason 'Player Request' not defined.",
        "parameters": [
          {
            "name": "limitId",
            "in": "path",
            "description": "Id of the limit to be canceled.\r\n            \r\nTo get a list of all player's set limits, use player/limits",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Limit deleted"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.CancelPlayerLimit",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/contact-preferences": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Get player contact preferences",
        "description": "# Get player contact preferences\r\n            \r\nThe method retrieves the player's contact preferences settings.\r\n            \r\n# Errors\r\n            \r\nError code                        | Description\r\n--------------------------------- | -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed.\r\n`InternalError`                   | Internal error.\r\n`Security`                        | Player id and secure token mismatch.",
        "responses": {
          "200": {
            "description": "Returns all the player contact preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlayerContactPreferencesResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetPlayerContactPreferences",
        "x-authorization-required": true
      },
      "put": {
        "tags": [
          "Player"
        ],
        "summary": "Update contact preferences of the player",
        "description": "# Update contact preferences of the player\r\n            \r\nThis method allows update player contact preferences.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.\r\n`Security`                  | Player id and secure token mismatch.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerContactPrefRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success flag indicating action success."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.UpdatePlayerContactPreferences",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/self-exclude": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Self exclude player",
        "description": "# Self exclude player\r\n            \r\nThis method time out the player’s account.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.\r\n`PlayerDataNotCorrect`      | Provided player data is not correct.",
        "requestBody": {
          "description": "Exclude player request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExcludePlayerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success status and time out of the player’s account."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.SelfExcludePlayer",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/validate-data": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Validate players data for uniqueness",
        "description": "# Validate player data\r\n            \r\nThis method allows data validation for input fields on registration page (username, email, bonus code).\r\n            \r\nThe field values are posted to the server as array. After the server validates each field,\r\nthe result is also a field that holds validation outcome statuses for corresponding field.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PortalNotActive`           | Portal isn't active.\r\n`PortalNotExist`            | Portal doesn't exist.\r\n`InternalError`             | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePlayerDataRequest"
              },
              "examples": {
                "Validate username and email of player for uniqueness": {
                  "value": {"portalId":1,"playerDataList":[{"type":"Username","value":"Player01"},{"type":"Email","value":"player01@mail.com"}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns players validation data result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerValidateDataResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ValidatePlayerData"
      }
    },
    "/api/portal/v1/player/refer-a-friend": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Refer a friend statistic",
        "description": "# Refer a friend statistic\r\n            \r\nThe method returns statistics on player referrals to friends - refer a friend functionality. This functionality means that players send invitations to other people who are not yet registered and could be.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.\r\n`PlayerNotFound`            | Player not found.",
        "responses": {
          "200": {
            "description": "Returns statistics on player referrals to friends.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferAFriendStatisticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ReferAFriendStatistic",
        "x-authorization-required": true
      },
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Refers a friend of the player.",
        "description": "# Refer a friend\r\n            \r\nRefer a friend functionality allows players to send invites to other people which are not yet registered and could potentially. Currently iCore supports SMS and EMAIL type of invites.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | ----------------------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`Security`                  | Player id and secure token mismatch.\r\n`InternalError`             | internal error.\r\n`RequestValidationError`    | One or more referees are invalid.\r\n`UnusedQuotaExceeded`       | Daily quota of invites sent is exceeded.",
        "requestBody": {
          "description": "Refer a friend request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferAFriendRequest"
              },
              "examples": {
                "Basic refer a friend request": {
                  "value": {"requestType":"Email","language":"en","registrationLink":"/register","homeLink":"www.domain.com","referees":[{"contact":"johndoe@test.com","name":"John Doe"},{"contact":"janeDoe@test.com","name":"Jane Doe"}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successfully executed and the referral messages should be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferAFriendResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ReferAFriend",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/time-out": {
      "put": {
        "tags": [
          "Player"
        ],
        "summary": "Time out player",
        "description": "# Time out player\r\nThis method sets the time/date until when player is timed out.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.\r\n`PlayerTimeOutFailed`       | Time out was failed for this player.\r\n`PlayerDataNotCorrect`      | Player data is incorrect.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeOutPlayerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success flag indicating action success."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.TimeoutPlayer",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/custom-parameters": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Inserts/updates player’s custom parameters",
        "description": "# Update player custom parameters\r\n            \r\nThe method will insert/update player’s custom parameters.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`Security`                  | Player id and secure token mismatch.\r\n`InternalError`             | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerCustomParamRequest"
              },
              "examples": {
                "Custom parameters for changing the color mode of the portal": {
                  "value": {"customParameters":{"PP color mode":"Light"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success flag indicating action success."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.UpdatePlayerCustomParameters",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/contact-info-verification": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Returns if contact info player is verified or not",
        "description": "# Contact info verification status\r\n            \r\nThis method returns the information whether specific contact info is verified or not for single player.\r\n            \r\n# Errors\r\n            \r\nError code                             | Description\r\n-------------------------------------- | -----------\r\n`PlayerSessionCheckFailed`             | Checking player session failed.\r\n`VerifyPlayerCodeFailed`               | General error occured.\r\n`VerifyRequestAttemptsLimitReached`    | Player has reached the limit of contact info verification request attempts.\r\n`InternalError`                        | Internal error.",
        "parameters": [
          {
            "name": "ContactInfoSubTypeId",
            "in": "query",
            "description": "Contact info subtype ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns if contact info status is verified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoVerificationStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.CheckContactInfoVerificationStatus",
        "x-authorization-required": true
      },
      "put": {
        "tags": [
          "Player"
        ],
        "summary": "Checks if contact info already exists",
        "description": "# Verify contact info\r\n            \r\nThis method allows verification of existing contact info request (via code or token)\r\nfor specified player (checks if code exists, if it exists, uses it – deletes it and return success message).\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n---------------------------         | -----------\r\n`VerificationCodeNotFound`          | Provided code was not found for specified playerId – this can be due to code lifetime which means that code expired.\r\n`VerifyPlayerCodeFailed`            | General error occured.\r\n`VerifyRequestAttemptsLimitReached` | Player has reached the limit of contact info verification request attempts.\r\n`InternalError`                     | Internal error.",
        "parameters": [
          {
            "name": "ContactInfoSubTypeId",
            "in": "query",
            "description": "SubID of contact info",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "VerificationCode",
            "in": "query",
            "description": "Code that you get via message or mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success flag indicating action success."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.VerifyContactInfo",
        "x-authorization-required": true
      },
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Generates contact info verification",
        "description": "# Contact info verification\r\n            \r\nThe method allows the generation of contact info verification requests (code or token)\r\nand sending to the player's contact device (i.e. phone) by using a notification manager.\r\n            \r\n# Errors\r\n            \r\nError code                             | Description\r\n-------------------------------------- | ----------------------\r\n`ContactInfoVerificationRequestFailed` | General error occured.\r\n`TokenQuotaExceeded`                   | Token quota exceeded.\r\n`MissingMandatoryField`                | Missing mandatory request parameter.\r\n`InternalError`                        | Internal error",
        "parameters": [
          {
            "name": "ContactInfoSubTypeId",
            "in": "query",
            "description": "The ID of contact info sub-type.\r\n\r\nPossible values:\r\n* 1 - home, \r\n* 2 - mobile1, \r\n* 3 - mobile2, \r\n* 4 - work, \r\n* 5 - fax, \r\n* 6 - other\r\n* 200 - email",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success status and generates contact info verification requests."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ContactInfoVerification",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/document": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Upload document",
        "description": "# Upload document\r\n            \r\nThe method provides an upload document where players can upload their documents: driver's license, passport, Identity card, etc...\r\n            \r\nSupported document formats are:\r\n* .jpg,\r\n* .png,\r\n* .doc,\r\n* .pdf.\r\n            \r\n# Errors\r\n            \r\nError code                    | Description\r\n----------------------------- | --------------------\r\n`PlayerSessionCheckFailed`    | Checking player session failed.\r\n`DocumentFormatNotSupported`  | Document format not supported. Suported document formats are jpg, png, doc and pdf.\r\n`DocumentUploadLimitExceeded` | Player exceeded document upload limit.\r\n`InternalError`               | Internal error.",
        "parameters": [
          {
            "name": "DocumentCategory",
            "in": "query",
            "description": "Document category type",
            "schema": {
              "$ref": "#/components/schemas/DocumentCategoryEnum"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "request": {
                  "style": "form"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "request": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Uploads the document and returns success status."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.UploadDocument",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/documents": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Get Documents",
        "description": "# Get List of documents\r\n            \r\nReturns the number of uploaded documents and their information in an array.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error",
        "responses": {
          "200": {
            "description": "Returns the number of uploaded documents and their information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetDocuments",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/email-verification": {
      "put": {
        "tags": [
          "Player"
        ],
        "summary": "Email Verification",
        "description": "# Player Email Verification\r\n            \r\nThis API method allows verification of existing email verification code for specified player (checks if code exists, if it exists, uses it – deletes it and return success message).\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`EmailVerificationError`    | Unable to verify email\r\n`UsePlayerTokenFailed`      | General error occured\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "secureKey",
            "in": "query",
            "description": "Secure key value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verifies player email."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.EmailVerification"
      }
    },
    "/api/portal/v1/player/username/forgot": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Sends email with the username to the player.",
        "description": "# Forgot username\r\n            \r\nCreates players forgot username request and sends email to player containing username.\r\n            \r\nTo get all secret question id's use `globalization/secret-questions`.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerDataNotCorrect`      | Provided player data is not correct.\r\n`PortalNotActive`           | Portal is not active.\r\n`PortalNotExist`            | The portal does not exist.\r\n`Internal error`            | Internal Error.",
        "requestBody": {
          "description": "Forgot username request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotUsernameRequest"
              },
              "examples": {
                "Basic forgoten username request": {
                  "value": {"email":"playersNon@ExistingEmail.com","secretQuestionId":1,"answer":"Answer to the secret question","portalId":1}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Player information is correct and an email should have been sent."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ForgotUsername"
      }
    },
    "/api/portal/v1/player/data": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Player data",
        "description": "# Get player data\r\n            \r\nThe method will return all the details for the current player.\r\n            \r\nThis is the same method as the GET /api/portal/v1/player method with the only difference that it returns also custom parameters.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerNotFound`            | Player not found.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "responses": {
          "200": {
            "description": "Return player with players data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetPlayerData",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/segments": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Player marketing segments",
        "description": "# Player marketing segments\r\n            \r\nThe method returns list of all marketing segments player is in based on provided marketing segment type.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "MarketingSegmentType",
            "in": "query",
            "description": "Types of player segments.\r\n            \r\nPossible  values:\r\n* Default,\r\n* ForWebUsage",
            "schema": {
              "$ref": "#/components/schemas/MarketingSegmentTypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of marketing segments player is in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlayerSegmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetPlayerSegments",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 5000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/player/token": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Creates player token",
        "description": "# Create player token\r\n            \r\nThe method allows the generation of player token request\r\nand sending to the player's contact device (i.e. phone) by using a notification manager.\r\n            \r\n# Errors\r\n            \r\nError code                             | Description\r\n-------------------------------------- | ----------------------\r\n`TokenQuotaExceeded`                   | Token quota exceeded.\r\n`SessionNotValid`                      | Provided session is not valid.\r\n`InvalidTokenType`                     | Invalid  player  token  type.\r\n`Failure`                              | Internal request failure\r\n`Failed`                               | Player Id  and  SecureToken  mismatch.\r\n`PlayerSessionAlreadyActive`           | The player's session has already been activated.\r\n`MaxWithdrawalAttempts`                | Player exceeded MAX incorrect attempts",
        "parameters": [
          {
            "name": "PlayerTokenTypeId",
            "in": "query",
            "description": "Token types",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerTokenTypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success status and generates create player token request."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.CreatePlayerToken",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/token/verify": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Verifies player token",
        "description": "# Verify player token\r\n            \r\nThe method allows the generation of verify player token request and verification of player's token\r\n            \r\n# Errors\r\n            \r\nError code                             | Description\r\n-------------------------------------- | ----------------------\r\n`TokenQuotaExceeded`                   | Token quota exceeded.\r\n`PlayerSessionCheckFailed`             | Checking player session failed.\r\n`InvalidTokenType`                     | Invalid  player  token  type.\r\n`Failure`                              | Internal request failure\r\n`Failed`                               | Player Id  and  SecureToken  mismatch.\r\n`InvalidToken`                         | Invalid  player  token .\r\n`MaxMFAAttempts`                       | Player exceeded MAX incorrect attempts.\r\n`PlayerSessionAlreadyActive`           | The player's session has already been activated.",
        "parameters": [
          {
            "name": "PlayerTokenTypeId",
            "in": "query",
            "description": "Token types",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerTokenTypeEnum"
            }
          },
          {
            "name": "Token",
            "in": "query",
            "description": "Token code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success status and generates verify player token request."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.VerifyPlayerToken",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/activate": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Activate player with activation token.",
        "description": "# Activate player\r\n            \r\nActivates player and return player id.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InvalidActivationToken`    | Activation token not found.\r\n`NotAllowedActivation`      | Not allowed activation - Player already activated.\r\n`InternalError `            | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivatePlayerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns player id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckUserRegistrationReturn"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ActivatePlayer"
      }
    },
    "/api/portal/v1/player/activation/send-email": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Send activation email.",
        "description": "# Send activation email\r\n            \r\nSend activation email with activation token and return success or error.\r\n            \r\n# Errors\r\n            \r\nError code                                    | Description\r\n--------------------------------------        | ----------------------\r\n`PlayerNotFoundByEmail`                       | Player not found by email and brand.\r\n`InvalidPlayerStatusForSendActivationEmail`   | Invalid player status for sending activation email – status must be 'Created'.\r\n`NumberOfEmailActivationsNotDefined`          | Extended attribute of type 'NumberOfEmailActivations' is not defined.\r\n`MultipleEntriesForNumberOfEmailActivations`  | Multiple entries in table TransactionExtendedAttribute found for 'NumberOfEmailActivations' – there must be only one one.\r\n`SendActivationEmailLimitReached`             | Maximum number of email activations reached.\r\n`SendActivationEmailFailed`                   | Failed to send activation email – internal error .",
        "requestBody": {
          "description": "Send activation email request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendActivationEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns success status and send activation email"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.SendActivationEmail"
      }
    },
    "/api/portal/v1/player/login/history": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Get logon history",
        "description": "# Get logon history\r\n            \r\nThis method will get all the login history of the player.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`Security`                  | Player with same username exists.\r\n`InternalError`             | Player Id and Secure Token mismatch.",
        "parameters": [
          {
            "name": "FromDate",
            "in": "query",
            "description": "Filter from date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ToDate",
            "in": "query",
            "description": "Filter to date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Number of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get logon histroy request example": {
                "value": "1"
              }
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Number of entries on page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get logon histroy request example": {
                "value": "10"
              }
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Sorting order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Descending",
            "in": "query",
            "description": "Player can set descending output for logon history.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "Get logon histroy request example": {
                "value": "True"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of logon sessions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogonSessionDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GetLogonHistory",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/onboarding": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Init registration flow.",
        "description": "# Init registration flow\r\n            \r\nInitializes registration and returns URL for the onboarding flow.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError `            | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns URL for the onboarding flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.Onboarding",
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 15000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/player/onboarding-check/cpf": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Onboarding check.",
        "description": "# Registration check\r\n            \r\nChecks the onboarding.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError `            | Internal error.",
        "parameters": [
          {
            "name": "PortalId",
            "in": "query",
            "description": "Portal ID in which the player will login.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Cpf",
            "in": "query",
            "description": "CPF number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.OnboardingCheck"
      }
    },
    "/api/portal/v1/player/close-account-face-auth": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Close account via face auth",
        "description": "# Close account via face auth\r\n            \r\nTriggers face auth process for closing the account.\r\n            \r\nUse FacialAuthentication method, to check face authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.CloseAccountFaceAuth",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/forgot-password-face-auth": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Forgot password via face auth",
        "description": "# Forgot password via face auth\r\n            \r\nTriggers forgot password request via face auth\r\n            \r\nUse FacialAuthentication method, to check face authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordFaceAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ForgotPasswordFaceAuth"
      }
    },
    "/api/portal/v1/player/update-face-auth": {
      "put": {
        "tags": [
          "Player"
        ],
        "summary": "Update players data via face auth",
        "description": "# Update players data via face auth\r\n            \r\nTriggers player update request via face auth\r\n            \r\nUse FacialAuthentication method, to check face authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceAuthUpdatePlayerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.UpdatePlayerFaceAuth",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/login-face-auth": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Login via face auth",
        "description": "# Login via face auth\r\n            \r\nTriggers player login request via face auth\r\n            \r\nUse FacialAuthentication method, to check face authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.LoginAuth",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/face-auth-status": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Face authentication process",
        "description": "# Face authentication\r\n            \r\nChecks facial authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "parameters": [
          {
            "name": "CafId",
            "in": "query",
            "description": "Caf Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthProcessResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.FacialAuthentication"
      }
    },
    "/api/portal/v1/player/activate/inactive": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Activate Inactive player with inactive activation token.",
        "description": "# Activate inactive player\r\n            \r\nActivates inactive player (player who did not login last 90 days) and return logon session.\r\n            \r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`UsePlayerTokenFailed `     | Activation token not found.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError `            | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateInactiveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns logon session.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ActivateInactivePlayer"
      }
    },
    "/api/portal/v1/player/geolocationcheck": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Check player GeoLocation.",
        "description": "# Errors\r\n            \r\nError code                        | Description\r\n----------------------------------| -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "requestBody": {
          "description": "Request with DeviceFingerprint",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeoLocationCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoLocationCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.GeoLocationCheck",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/reverification": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Player reverification.",
        "description": "# Re-verify player data\r\n            \r\nRe-verifies player data\r\n            \r\n# Errors\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError `            | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ReVerification"
      }
    },
    "/api/portal/v1/player/annual-report/request": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Annual report request.",
        "description": "# Request player annual report\r\n            \r\nRequests players annual report. Should send a token to players email. Afterward run annual-report/confirm.\r\n            \r\n# Errors\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError `            | Internal error.",
        "responses": {
          "200": {
            "description": "Request finished successfully"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.AnnualReportDemand",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/player/annual-report/confirm": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Annual report confirm.",
        "description": "# Confirm players annual report\r\n            \r\nConfirm players annual report. Input token should be received via e-mail after running annual-report/request.\r\n            \r\n# Errors\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError `            | Internal error.",
        "parameters": [
          {
            "name": "Token",
            "in": "query",
            "description": "Token, received via e-mail.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request finished successfully"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.AnnualReportCheck"
      }
    },
    "/api/portal/v1/player/change-player-password-face-auth": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Change player password via face auth",
        "description": "# Change player password via face auth\r\n            \r\nTriggers change player password request via face auth\r\n            \r\nUse FacialAuthentication method, to check face authentication process status.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePlayerPasswordAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.Brazil, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.Brazil.PlayerPortalFacadeControllers.Controllers.v1.PlayerController.ChangePlayerPasswordAuth"
      }
    },
    "/api/portal/v1/player/player-activity": {
      "post": {
        "tags": [
          "Player"
        ],
        "summary": "Player activity.",
        "description": "# Player Activity\r\n            \r\nTriggers player activity signal.\r\n            \r\n# Errors\r\n            \r\nError code                          | Description\r\n----------------------------------- | -----------\r\n`InternalError `                    | Internal error.\r\n`RGLSiteSessionCheckFailed`         | RGL Site session check failed.\r\n`RGLDailySiteSessionCheckFailed`    | RGL Daily site session check failed.\r\n`RGLMonthlySiteSessionCheckFailed`  | RGL Monthly site session check failed.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.RPB, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.CustomerSpecific.RPB.Controllers.PlayerPortalFacadeControllers.RPB.Controllers.v1.PlayerController.PlayerActivity",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/prod-game/game": {
      "post": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns Game data for game launch (demo play)",
        "description": "# GetGameReturn\r\n\r\nFree-play option for returning Launch game URL for the selected external game id. This allows non-registered (not logged in players) to launch a game.\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`GameNotFound`              | Game with id {Id} does not exists\r\n`InternalError`             | Internal error",
        "requestBody": {
          "description": "Game Not Secure Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameNotSecureRequest"
              },
              "examples": {
                "Get native game with game id and custom properties:": {
                  "value": {"portalId":2,"extGameId":"03-0005-01-01","isNative":true,"language":"en-US","properties":{"Some custom property":"Some value of this custom property","Another custom property":"The valuue of this other custom property"}}
                },
                "Get native game with game id and no custom properties:": {
                  "value": {"portalId":2,"extGameId":"03-0005-01-01","isNative":true,"language":"en-US","properties":{}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Launch game urld.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostGameResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.PostGameNotSecure"
      }
    },
    "/api/portal/v1/prod-game/player/game": {
      "post": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns data required for launching a specific game for a player",
        "description": "# Post player game\r\n\r\nThe method returns data required for launching a specific game for the authenticated player.\r\n \r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | ----------------------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.\r\n`GameNotFound`              | Game does not exists.\r\n`GameNotAllowed`            | Game launch not allowed, cause of Player account.    \r\n`GameRestricted`            | Game is restricted.",
        "requestBody": {
          "description": "Player game request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerGameRequest"
              },
              "examples": {
                "Get player game:": {
                  "value": {"extGameId":"03-0005-01-01","portalId":2,"realPlay":false,"isNative":false,"language":"en-US","properties":{},"desiredCurrency":null}
                },
                "Get unavailable game:": {
                  "value": {"extGameId":"01-0009-01-01","portalId":2,"realPlay":false,"isNative":false,"language":"en-US","properties":{},"desiredCurrency":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns data required for launching a specific game for a player.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostGameResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.PostPlayerGame",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/prod-game/games/{PortalId}": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns the games for a specific portal",
        "description": "Warning: This method returns a large quantity of data and might cause your browser to lag.\r\n            \r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PortalNotActive`           | Portal is not active.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "PortalId",
            "in": "path",
            "description": "ID of the application / portal",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of games via category portal id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameMainsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetGameMains",
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 120000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/prod-game/games/for-category/{CategoryId}": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns games in a specific category",
        "description": "# Get games by category\r\n\r\nThe method gives a list of game IDs in a specific category.\r\n\r\n# Errors\r\n  \r\nError code        | Description\r\n----------------- | ----------------------\r\n`PortalNotExist`  | Portal does not exist.\r\n`InternalError`   | Internal error",
        "parameters": [
          {
            "name": "CategoryId",
            "in": "path",
            "description": "Category ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of game identifiers and their total number.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumGameIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetGameMainsForCategory",
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 120000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/prod-game/pre-game/{extGameId}": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns the pregame message for a player",
        "description": "# Get the pregame by external game id \r\n\r\nThis method returns the pregame message for a player.\r\n\r\nTo get the message on preLaunchGame following configuration steps need to be made:\r\n* Configure bonus where only a subset of games(e.g.only Habanero games) contribute toward wagering requirements \r\n* Launch a game that does not contribute towards wagering requirements.\r\n*\tThe following notification due to the pregame launch check is shown before the game is launched\r\n\r\n# Errors\r\n  \r\nError code              | Description\r\n----------------------- | ----------------------------\r\n`PortalNotExist`        | Portal does not exist.\r\n`InternalError`         | Internal error.\r\n`GameNotFound`          | Game with id {extGameId} does not exists.\r\n`GameNotAllowed`        | Game launch not allowed, cause of Player account.\r\n`MissingMandatoryField` | Missing mandatory request parameter.",
        "parameters": [
          {
            "name": "extGameId",
            "in": "path",
            "description": "External game ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pregame message for a player and the total number of all messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPreGameMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetPreGameByExtGameId",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/prod-game/lobby": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns entire lobby games hierarchies (structure).",
        "description": "# Get Lobby (not secure)\r\n\r\nThe method will retrieve entire lobby games hierarchies (structure) for unauthenticated player. \r\n\r\n# Errors\r\n  \r\nError code                 | Description\r\n-------------------------- | -----------\r\n`PortalNotActive`          | Portal is not active.  \r\n`PortalNotExist`           | Portal does not exist.\r\n`InvalidLevel`             | Level not found or restricted. \r\n`InternalError`            | Internal error",
        "parameters": [
          {
            "name": "PortalId",
            "in": "query",
            "description": "ID of  the application / portal. \r\nSee `GetPortals` for list of supported locales.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Player Lobby Game Main Request - Example 1": {
                "value": "1"
              },
              "Player Lobby Game Main Request - Example 2": {
                "value": "2"
              }
            }
          },
          {
            "name": "Language",
            "in": "query",
            "description": "Language code or culture code of player lobby game.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Player Lobby Game Main Request - Example 1": {
                "value": "en"
              },
              "Player Lobby Game Main Request - Example 2": {
                "value": "en"
              }
            }
          },
          {
            "name": "LevelId",
            "in": "query",
            "description": "Level ID that is used to further filter the returned list of categories.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Player Lobby Game Main Request - Example 1": {
                "value": "1"
              },
              "Player Lobby Game Main Request - Example 2": {
                "value": "2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns entire lobby games hierarchies (structure).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LevelDataGameMain"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.LobbyNotSecureGameMain",
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 120000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/prod-game/player/lobby": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns a list of categories for a certain level.",
        "description": "# Get Player lobby\r\n\r\nThe method will retrieve a list of categories for a certain level. \r\nEach category can contain several sub-categories (tree structure) as well as a list of games. \r\n\r\n# Errors\r\n  \r\nError code                 | Description\r\n-------------------------- | -----------\r\n`PlayerSessionCheckFailed` | Checking player session failed.   \r\n`PortalNotActive`          | Portal is not active.  \r\n`PortalNotExist`           | Portal does not exist.\r\n`InvalidLevel`             | Level not found or restricted. \r\n`InternalError`            | Internal error",
        "parameters": [
          {
            "name": "PortalId",
            "in": "query",
            "description": "ID of  the application / portal. \r\nSee `GetPortals` for list of supported locales.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Player Lobby Game Main Request - Example 1": {
                "value": "1"
              },
              "Player Lobby Game Main Request - Example 2": {
                "value": "2"
              }
            }
          },
          {
            "name": "Language",
            "in": "query",
            "description": "Language code or culture code of player lobby game.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Player Lobby Game Main Request - Example 1": {
                "value": "en"
              },
              "Player Lobby Game Main Request - Example 2": {
                "value": "en"
              }
            }
          },
          {
            "name": "LevelId",
            "in": "query",
            "description": "Level ID that is used to further filter the returned list of categories.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Player Lobby Game Main Request - Example 1": {
                "value": "1"
              },
              "Player Lobby Game Main Request - Example 2": {
                "value": "2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of categories for a certain level, several subcategories and a list of games category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LevelDataGameMain"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.PlayerLobbyGameMain",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 120000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/prod-game/favorites/{PortalId}": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Get Player Shortcut Game",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PortalNotActive`           | Portal is not active.\r\n`PortalNotExist`            | Portal does not exist.\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "PortalId",
            "in": "path",
            "description": "Portal Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of shortcut games for specified player.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerShortcutGameMainsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetPlayerShortcutGameMains",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 5000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "ByPlayerId",
        "x-cache-purge-after-method": [
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.AddPlayerShortcutGameMain",
          "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.RemovePlayerShortcutGameMain"
        ]
      }
    },
    "/api/portal/v1/prod-game/favorite/{ExtGameId}": {
      "put": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Adds a game shortcut to a player",
        "description": "# Add shortcut for a games \r\n\r\nThe method adds a new game shortcut to a player according to the entered external identifier.\r\n \r\n# Errors\r\n  \r\nError code                 | Description\r\n-------------------------- | -----------\r\n`PlayerSessionCheckFailed` | Checking player session failed.   \r\n`GameNotFound`             | Game with id {ExtGameId} does not exists.\r\n`InternalError`            | Internal error",
        "parameters": [
          {
            "name": "ExtGameId",
            "in": "path",
            "description": "External game ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return success status and adds a shortcut game for a player."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.AddPlayerShortcutGameMain",
        "x-authorization-required": true
      },
      "delete": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Delete the game from the player shortcut",
        "description": "# Delete shortcut for a games \r\n\r\nThis method deletes the player's existing games shortcut according to the entered external ID.  \r\n# Errors\r\n  \r\nError code                 | Description\r\n-------------------------- | -----------\r\n`PlayerSessionCheckFailed` | Checking player session failed.   \r\n`GameNotFound`             | Game with id {ExtGameId} does not exists.\r\n`InternalError`            | Internal error",
        "parameters": [
          {
            "name": "ExtGameId",
            "in": "path",
            "description": "External game ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return success status and the game shortcut for a player."
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.RemovePlayerShortcutGameMain",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/prod-game/player/game-restrictions": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Get restrictions for player",
        "description": "# Get restrictions for player\r\n\r\nReturns restriction/availability data, similar to GetRestrictionsNotSecure.\r\nHowever this method returns data in regards to the player.\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`Internal error`            | Internal error.",
        "parameters": [
          {
            "name": "PortalId",
            "in": "query",
            "description": "Portal id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restriction/availability data specific for the player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRestrictionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetRestrictionsForPlayer",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/prod-game/recent": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Gets players recently played games",
        "description": "# Get player recently played games\r\n  \r\nReturns a list of players top recently played games.\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`PlayerNotFound`            | Player not found.\r\n`Internal error`            | Internal error.",
        "parameters": [
          {
            "name": "Count",
            "in": "query",
            "description": "Number of top games to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PortalId",
            "in": "query",
            "description": "Portal id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the id's of the players top recently played games",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopRecentGame"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetPlayerTopRecentGames",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/prod-game/game-restrictions": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Get restrictions unsecure",
        "description": "# Get restrictions unsecure  \r\n\r\nThis method returns restrictions/availability information. It includes data for the portal, product and product supplier.\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`Internal error`            | Internal error.",
        "parameters": [
          {
            "name": "PortalId",
            "in": "query",
            "description": "Portal Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Restrictions Not Secure Request": {
                "value": "1"
              }
            }
          },
          {
            "name": "CountryCode",
            "in": "query",
            "description": "Country Code",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Restrictions Not Secure Request": {
                "value": "ID"
              }
            }
          },
          {
            "name": "CurrencyCode",
            "in": "query",
            "description": "Currency code",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Restrictions Not Secure Request": {
                "value": "USD"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product, supplier and portal restriction/availability data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRestrictionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetRestrictionsNotSecure"
      }
    },
    "/api/portal/v1/prod-game/game/help": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Basic game information, translated to the provided language code",
        "description": "# Get game help\r\n\r\nThis method returns basic information about a specific game.\r\nThe information is structured in key value pairs. The value is already translated\r\ninto the specified language and can be displayed in the client.\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "extGameId",
            "in": "query",
            "description": "External game id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portalId",
            "in": "query",
            "description": "Portal Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "description": "Language code\r\n\r\nThe language code controls which translation is returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of fields and already translated text for the specific field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameMainTranslation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetGameMainHelp"
      }
    },
    "/api/portal/v1/prod-game/game/parameters/{extGameId}": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Get game parameters",
        "description": "# Get game parameters\r\n\r\nRetrieves a list of parameters for a specific game\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "extGameId",
            "in": "path",
            "description": "External game id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get Game Main Parameters Request": {
                "value": "03-0005-01-01"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of parameter names and values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameParametersResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetGameMainParameters"
      }
    },
    "/api/portal/v1/prod-game/game-categories/{PortalId}": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Returns game categories for given portal",
        "parameters": [
          {
            "name": "PortalId",
            "in": "path",
            "description": "Portal ID in which the player will login.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers.RPB, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.CustomerSpecific.RPB.Controllers.PlayerPortalFacadeControllers.RPB.Controllers.v1.ProdGameController.GetGameCategories"
      }
    },
    "/api/portal/v1/prod-game/games/history": {
      "get": {
        "tags": [
          "ProdGame"
        ],
        "summary": "Get game history",
        "description": "# Get game history\r\n\r\nGame history functionality provides the history of game results. \r\nEach game (which requires integration with 3rd party game supplier) provides details screens where players can see the details of the specific game.\r\n\r\n# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n'PlayerNotFound'            | Player not found.\r\n'InternalError'             | Internal error.",
        "parameters": [
          {
            "name": "FromDate",
            "in": "query",
            "description": "Date from for players game history in ISO format (YYYY-MM-DD HH:MM:SS).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ToDate",
            "in": "query",
            "description": "Date to for players game history in ISO format (YYYY-MM-DD HH:MM:SS).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size for number of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "description": "Status search criteria.",
            "schema": {
              "$ref": "#/components/schemas/GameCycleStatusEnum"
            }
          },
          {
            "name": "ProductType",
            "in": "query",
            "description": "This will be predefined and PortalGateway consumers should get this from us.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns players game history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.ProdGameController.GetGameHistory",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/cms/promotions": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotions",
        "description": "# Get promotions\r\nThe method will return list of promotions.\r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "Slugs",
            "in": "query",
            "description": "Category key list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PromotionIds",
            "in": "query",
            "description": "Promotion IDs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "Language code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get promotions request": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of promotions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "CMS.Api.Controllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.CMS.CMS.Api.Controllers.v1.PromotionController.GetPromotions"
      }
    },
    "/api/portal/v1/cms/player/promotions": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get player promotions",
        "description": "# Get promotions\r\nThe method will return list of promotions.\r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "Slugs",
            "in": "query",
            "description": "Category key list",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PromotionIds",
            "in": "query",
            "description": "Promotion IDs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "LanguageCode",
            "in": "query",
            "description": "Language code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get player promotions request": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of promotions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromotionData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "CMS.Api.Controllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.CMS.CMS.Api.Controllers.v1.PromotionController.GetPlayerPromotions",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/reward/all": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get all rewards with status Active and ComingSoon",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "BrandId",
            "in": "query",
            "description": "BrandId to get rewards for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Get all rewards for brand 2 with default friendly names and descriptions": {
                "value": "2"
              },
              "Get all rewards for brand 2 with english friendly names and descriptions": {
                "value": "2"
              }
            }
          },
          {
            "name": "Language",
            "in": "query",
            "description": "Language code to be used for reward friendly names and descriptions. If null, then each reward will use its default friendly name and description. If there is no default friendly name and description for a reward, then it will use reward name and empty description.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get all rewards for brand 2 with english friendly names and descriptions": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rewards for unauthenticated players.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllRewardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.RewardController.GetAllRewards"
      }
    },
    "/api/portal/v1/reward/claimable": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get rewards available to be claimed by the player",
        "description": "# Errors\r\n\r\nError code                        | Description\r\n--------------------------------- | -----------\r\n`PlayerSessionCheckFailed`        | Checking player session failed\r\n`Security`                        | Player Id and Secure Token mismatch\r\n`InternalError`                   | Internal error",
        "parameters": [
          {
            "name": "Language",
            "in": "query",
            "description": "Language code to be used for reward friendly names and descriptions\r\n\r\nIf the parameter is null, then the reward's default friendly name and description will be used.\r\nIf friendly name and description don't exist in the specified language, then the default friendly name and description will be used.\r\nIf there is no default friendly name and description for a reward, then it will use reward's name and empty description.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get rewards with english friendly names and descriptions": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClaimableRewardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.RewardController.GetClaimableRewards",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/reward/claim-item": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Claim a reward of type Item",
        "description": "# Errors\r\n\r\nError code                   | Description\r\n---------------------------- | -----------\r\n`PlayerSessionCheckFailed`   | Checking player session failed\r\n`Security`                   | Player Id and Secure Token mismatch\r\n`InternalError`              | Internal error\r\n`RewardNotFound`             | The reward with the specified RewardId was not found\r\n`InvalidOperation`           | Method was called with the wrong reward type\r\n`RewardNotActive`            | Reward status is not Active\r\n`RewardNotAvailable`         | Current datetime is not within the configured available timespan for this reward\r\n`RequiredPointsChanged`      | Required points in the request do not match required points configured for this reward\r\n`PlayerNotEligibleForReward` | The player is not eligible for this reward\r\n`InsufficientPoints`         | The player does not have enough points to claim this reward",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimRewardItemRequest"
              },
              "examples": {
                "Claim a reward item": {
                  "value": {"shippingAddress":{"name":"Arthur Dent","contactNumber":"+123456789","email":"test@example.com","address":"Testing Street 123","city":"Testingville","postcode":"9001","country":"Testonia"},"comment":"Some comment","rewardId":1,"requiredPoints":42}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.RewardController.ClaimRewardItem",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/reward/claim-bonus": {
      "post": {
        "tags": [
          "Reward"
        ],
        "summary": "Claim a reward of type Bonus",
        "description": "# Errors\r\n\r\nError code                   | Description\r\n---------------------------- | -----------\r\n`PlayerSessionCheckFailed`   | Checking player session failed\r\n`Security`                   | Player Id and Secure Token mismatch\r\n`InternalError`              | Internal error\r\n`RewardNotFound`             | The reward with the specified RewardId was not found\r\n`InvalidOperation`           | Method was called with wrong reward type\r\n`RewardNotActive`            | Reward status is not Active\r\n`RewardNotAvailable`         | Current datetime is not within configured available timespan for this reward\r\n`RequiredPointsChanged`      | Required points in the request do not match required points configured for this reward\r\n`PlayerNotEligibleForReward` | The player is not eligible for this reward\r\n`InsufficientPoints`         | The player does not have enough points to claim this reward\r\n`BonusNotInActiveStatus`     | The status of the bonus configured for this reward is not Active\r\n`DisabledProductType`        | The product type of the bonus is disabled for this player\r\n`BonusUnsuccessfullyAwarded` | The bonus was not successfully awarded to the player",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimRewardBonusRequest"
              },
              "examples": {
                "Claim a reward bonus": {
                  "value": {"rewardId":1,"requiredPoints":42}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.RewardController.ClaimRewardBonus",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/reward/claimed": {
      "get": {
        "tags": [
          "Reward"
        ],
        "summary": "Get rewards that were claimed by the player",
        "description": "# Errors\r\n\r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed\r\n`Security`                  | Player Id and Secure Token mismatch\r\n`InternalError`             | Internal error",
        "parameters": [
          {
            "name": "Language",
            "in": "query",
            "description": "Language code to be used for reward friendly names and descriptions. If null, then each reward will use its default friendly name and description. If there is no default friendly name and description for a reward, then it will use reward name and empty description.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Get rewards claimed by player with english friendly names and descriptions": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClaimedRewardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.RewardController.GetClaimedRewards",
        "x-authorization-required": true
      }
    },
    "/api/portal/v1/sportsbook/bets": {
      "get": {
        "tags": [
          "Sportsbook"
        ],
        "summary": "Get bet history",
        "description": "# Get bet history\r\nGame history functionality provides the history of sportsbook game results. Each game (requires the integration with 3rd party game supplier) \r\nprovides details screens where players can see the details of the specific game.\r\n\r\n\r\n# Errors\r\n  \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`PlayerSessionCheckFailed`  | Checking player session failed.\r\n`PlayerNotFound`            | Player not foun\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "FromDate",
            "in": "query",
            "description": "Filter from date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "examples": {
              "Basic register": {
                "value": "01/22/2004 10:01:00 +00:00"
              }
            }
          },
          {
            "name": "ToDate",
            "in": "query",
            "description": "Filter to date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "examples": {
              "Basic register": {
                "value": "01/23/2025 10:01:00 +00:00"
              }
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Number of entries on page",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Basic register": {
                "value": "1"
              }
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Number of the page",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Basic register": {
                "value": "1"
              }
            }
          },
          {
            "name": "Status",
            "in": "query",
            "description": "Status of bet history",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBetHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          },
          {
            "JwtBearer_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.SportsbookController.GetBetHistory",
        "x-authorization-required": true,
        "x-cache-enabled": true,
        "x-cache-type": "Distributed",
        "x-cache-soft-timeout-milis": 30000,
        "x-cache-hard-timeout-milis": 300000,
        "x-cache-lock-timeout-milis": 10000,
        "x-cache-retries-count": 30,
        "x-cache-retries-delay-milis": 100,
        "x-cache-delete-cache-group-count": 100,
        "x-cache-grouping": "NoGrouping"
      }
    },
    "/api/portal/v1/cms/templates": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get templates",
        "description": "# Get banners\r\nThe method will return list of templates.\r\n# Errors\r\n            \r\nError code                  | Description\r\n--------------------------- | -----------\r\n`InternalError`             | Internal error.",
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "description": "The `brandId` for which to return the data. If `brandId` is omitted or `0`, all templates will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "CMS.Api.Controllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Modules.CMS.CMS.Api.Controllers.v1.TemplateController.GetTemplates"
      }
    },
    "/api/portal/v1/template/terms-and-conditions": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Current terms and conditions",
        "description": "# Current terms and conditions\r\n\r\nThis method returns current terms and conditiions text formated with version, language and metadata information.\r\n\r\n# Errors\r\n  \r\nError code                         | Description\r\n---------------------------------- | -----------\r\n`TermsAndConditionsMisconfigured`  | Terms and conditions settings are not configured properly!   \r\n`Failure`                          | Internal request failure.  \r\n`TermsAndConditionsMisconfigured`  | Portal is not active.",
        "parameters": [
          {
            "name": "PortalId",
            "in": "query",
            "description": "ID of  the application / portal. \r\nSee `GetPortals` for list of supported locales.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "examples": {
              "Current terms and conditions": {
                "value": "1"
              }
            }
          },
          {
            "name": "Locale",
            "in": "query",
            "description": "Terms and conditions template language.\r\nSee `GetLanguages` for list of supported locales.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "Current terms and conditions": {
                "value": "en-US"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves current terms and conditions template for given portal and locale.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentTermsAndConditionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "A known error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalGatewayValidationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error has occurred"
          }
        },
        "security": [
          {
            "ApiKey_PG": [ ]
          }
        ],
        "x-assembly": "PlayerPortalFacadeControllers, Version=2.94.0.2691, Culture=neutral, PublicKeyToken=null",
        "x-method": "PortalGateway.Vanilla.Controllers.PlayerPortalFacadeControllers.Controllers.v1.TemplateController.CurrentTermsAndConditions"
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptMultiChoiceBonusRequest": {
        "required": [
          "playerBonusContextId"
        ],
        "type": "object",
        "properties": {
          "playerBonusContextId": {
            "type": "integer",
            "description": "Player Bonus Context ID",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AcceptWithdrawalRequestBonusRequest": {
        "required": [
          "playerBonusContextId",
          "withdrawalAmount"
        ],
        "type": "object",
        "properties": {
          "playerBonusContextId": {
            "type": "integer",
            "description": "Player bonus context ID",
            "format": "int32"
          },
          "withdrawalAmount": {
            "type": "number",
            "description": "Withdrawal amount",
            "format": "decimal"
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Account": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Account name",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "description": "Balance",
            "format": "decimal"
          },
          "lockedAmount": {
            "type": "number",
            "description": "Real money locked amount.",
            "format": "decimal"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeEnum"
          },
          "productType": {
            "type": "string",
            "description": "Product type for which bonus the balance is applicable.",
            "nullable": true
          },
          "wageringRequirement": {
            "type": "number",
            "description": "Wagering requuirement for active bonus.",
            "format": "decimal",
            "nullable": true
          },
          "wagered": {
            "type": "number",
            "description": "Currenty wagered with active bonus.",
            "format": "decimal",
            "nullable": true
          },
          "wagerType": {
            "$ref": "#/components/schemas/WagerTypeEnum"
          },
          "bonusType": {
            "type": "string",
            "description": "Bonus type for which bonus the balance is applicable.",
            "nullable": true
          },
          "initiallyLockedAmount": {
            "type": "number",
            "description": "Amount of money that was locked when the bonus was awarded.",
            "format": "decimal"
          },
          "bonusCategoryId": {
            "$ref": "#/components/schemas/BonusCategoryIdEnum"
          },
          "playerBonusId": {
            "type": "integer",
            "description": "Player bonus id (set only on account type BonusMoney)",
            "format": "int32",
            "nullable": true
          },
          "wageringContributionMode": {
            "$ref": "#/components/schemas/WageringContributionModeEnum"
          },
          "numWageredRequirement": {
            "type": "integer",
            "description": "Number of required bonus wagering bets",
            "format": "int32",
            "nullable": true
          },
          "totalNumWagered": {
            "type": "integer",
            "description": "Number of successful bets already made at the bonus wagering",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountTypeEnum": {
        "enum": [
          "FakeMoney",
          "Money",
          "BonusMoney",
          "LoyaltyPoints",
          "RingfencedBalance",
          "PendingWinnings",
          "ExternalBonus",
          "NonWithdrawableBalance",
          "WithdrawableBalance"
        ],
        "type": "string"
      },
      "ActivateInactiveRequest": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string",
            "description": "Inactive players token"
          }
        },
        "additionalProperties": false
      },
      "ActivatePlayerRequest": {
        "type": "object",
        "properties": {
          "secureToken": {
            "type": "string",
            "description": "Player activation token",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddPaymentAccountRequest": {
        "type": "object",
        "properties": {
          "paymentInstrumentType": {
            "$ref": "#/components/schemas/PaymentInstrumentTypeEnum"
          },
          "paymentInstrumentId": {
            "type": "integer",
            "description": "Payment instrument id: 22 – LocalBankTransfer(bank accounts)",
            "format": "int32",
            "nullable": true
          },
          "paymentProviderId": {
            "type": "integer",
            "description": "ID of payment provider.",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional payment account parameters.",
            "nullable": true
          },
          "testMode": {
            "type": "boolean",
            "description": "Send true for testing purposes."
          }
        },
        "additionalProperties": false,
        "description": "Get Payment Accounts Request"
      },
      "AddPaymentAccountResponse": {
        "type": "object",
        "properties": {
          "paymentAccountId": {
            "type": "integer",
            "description": "ID of payment account.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Add Payment Accounts return"
      },
      "ApprovalStatusEnum": {
        "enum": [
          "Unapproved",
          "Approved",
          "Partial",
          "Declined"
        ],
        "type": "string"
      },
      "AvailabilityFlags": {
        "type": "object",
        "properties": {
          "internalPlayerRestricted": {
            "type": "boolean",
            "description": "If true internal players cannot use the product"
          },
          "externalPlayerRestricted": {
            "type": "boolean",
            "description": "If true, external players cannot use the product"
          },
          "unknownPlayerRestricted": {
            "type": "boolean",
            "description": "If true, unknown players cannot use the product"
          },
          "maintenanceModeEnabled": {
            "type": "boolean",
            "description": "If true, maintenance mode is enabled"
          },
          "realPlayRestricted": {
            "type": "boolean",
            "description": "If true, real play is restricted"
          },
          "demoPlayRestricted": {
            "type": "boolean",
            "description": "If true, demo play is restricted"
          }
        },
        "additionalProperties": false,
        "description": "Availability flags"
      },
      "AvailableFreeSpinGamesModel": {
        "type": "object",
        "properties": {
          "bonusConfigurationId": {
            "type": "integer",
            "description": "iCore bonus configuration ID",
            "format": "int32",
            "nullable": true
          },
          "bonusId": {
            "type": "integer",
            "description": "External bonus configuration ID",
            "format": "int32",
            "nullable": true
          },
          "bonusName": {
            "type": "string",
            "description": "Bonus name in iCore configuration",
            "nullable": true
          },
          "bonusFriendlyName": {
            "type": "string",
            "description": "Bonus friendly name in iCore configuration",
            "nullable": true
          },
          "playerBonusId": {
            "type": "integer",
            "description": "Player context bonus ID",
            "format": "int32",
            "nullable": true
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GamesModel"
            },
            "description": "List of games",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AwardConditionAwardTimeTypeEnum": {
        "enum": [
          "AtTheEndOfPeriod",
          "Immediately"
        ],
        "type": "string"
      },
      "AwardConditionFulfilmentData": {
        "type": "object",
        "properties": {
          "triggerType": {
            "type": "string",
            "description": "Trigger type\r\nPossible values:\r\n* Deposit\r\n* Wager\r\n* Loss\r\n* NewPaymentMethod\r\n* Win\r\n* ChangeOfVipLevel\r\n* Transfer\r\n* MarketingPoints\r\n* Event",
            "nullable": true
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinMaxAmountData"
            },
            "description": "Amount data (present only for trigger types where min and max values are defined)",
            "nullable": true
          },
          "thresholdValue": {
            "type": "number",
            "description": "Treshold value to meet condition criteria (present only when min and max values are not defined)",
            "format": "decimal",
            "nullable": true
          },
          "paymentMethodIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of payment instrument ids for which condition is applicable (only present for Deposit and NewPaymentMethod trigger types)",
            "nullable": true
          },
          "includedVIPlevelsIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of VIP level ids for which condition is applicable (present only for ChangeOfVipLevel trigger type)",
            "nullable": true
          },
          "timePeriodType": {
            "$ref": "#/components/schemas/TimePeriodTypeEnum"
          },
          "playerFulfillmentTotal": {
            "type": "number",
            "description": "Player fulfillment total amount",
            "format": "decimal",
            "nullable": true
          },
          "playerFulfillmentLeft": {
            "type": "number",
            "description": "Player fulfillment amount left to satisfy awarding condition",
            "format": "decimal",
            "nullable": true
          },
          "playerFulfillmentUnit": {
            "type": "string",
            "description": "Player fulfillment unit",
            "nullable": true
          },
          "awardConditionMet": {
            "type": "boolean",
            "description": "Award condition met flag",
            "nullable": true
          },
          "currentDepositNumber": {
            "type": "integer",
            "description": "Current deposit number counter (present only for Deposit trigger type)",
            "format": "int32",
            "nullable": true
          },
          "awardTimeType": {
            "$ref": "#/components/schemas/AwardConditionAwardTimeTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "BetStatusEnum": {
        "enum": [
          "None",
          "Placed",
          "Running",
          "CashOut",
          "PartialCashOut",
          "Won",
          "Lost",
          "HalfWon",
          "HalfLost",
          "Tie",
          "Void",
          "Cancelled",
          "Declined",
          "Refund"
        ],
        "type": "string",
        "description": "Bet status type\r\nPossible values:\r\n* None,\r\n* Placed,\r\n* Running,\r\n* CashOut,\r\n* PartialCashOut,\r\n* Won,\r\n* Lost,\r\n* HalfWon,\r\n* HalfLost,\r\n* Tie,\r\n* Void,\r\n* Cancelled,\r\n* Declined,\r\n* Refund."
      },
      "Betinfo": {
        "type": "object",
        "properties": {
          "betSlipId": {
            "type": "integer",
            "description": "id of the bet slip",
            "format": "int64"
          },
          "externalBetSlipId": {
            "type": "string",
            "description": "External id of the bet slip",
            "nullable": true
          },
          "playerId": {
            "type": "integer",
            "description": "Player id",
            "format": "int64"
          },
          "betSlipDescription": {
            "type": "string",
            "description": "Description of the bet slip",
            "nullable": true
          },
          "insertDate": {
            "type": "string",
            "description": "Time of insertion of the bet slip",
            "format": "date-time"
          },
          "placedTime": {
            "type": "string",
            "description": "Time of placement of the bet slip",
            "format": "date-time"
          },
          "generalStake": {
            "type": "number",
            "description": "General bet stake",
            "format": "decimal"
          },
          "winAmount": {
            "type": "number",
            "description": "Win amount – Total/Net depends on bonus configuration",
            "format": "decimal",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of bet slip",
            "nullable": true
          },
          "statusId": {
            "$ref": "#/components/schemas/BetStatusEnum"
          },
          "settleTime": {
            "type": "string",
            "description": "Time of settlement",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bet info"
      },
      "BonusAmountPerCurrency": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Bonus amount",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BonusAwardingData": {
        "type": "object",
        "properties": {
          "awardConditionFulfilment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AwardConditionFulfilmentData"
            },
            "description": "Configuration value towards which condition bonus goes",
            "nullable": true
          },
          "awardConditionFulfilmentOperator": {
            "type": "string",
            "description": "Award condition fulfilment operator in case of multiple conditions\r\nPossible values:\r\n* `AND` = all conditions must be met in order to receive bonus\r\n* `OR` = at least one of the conditions must be met in order to receive bonus",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BonusCategoryIdEnum": {
        "enum": [
          "FirstDeposit",
          "Reload",
          "Rebate",
          "Cashback",
          "FreeSpins",
          "AwardGames",
          "Freebet"
        ],
        "type": "string"
      },
      "BonusFreeSpins": {
        "type": "object",
        "properties": {
          "totalNumberOfFreeSpins": {
            "type": "integer",
            "description": "Total number of free spins awarded",
            "format": "int32"
          },
          "numberOfFreeSpinsUsed": {
            "type": "integer",
            "description": "Number of used free spins",
            "format": "int32"
          },
          "freeSpinValue": {
            "type": "number",
            "description": "Value for a free spin",
            "format": "decimal"
          },
          "freeSpinsWinnings": {
            "type": "number",
            "description": "Winnings when playing free spins",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "BonusOptInSchedulingData": {
        "type": "object",
        "properties": {
          "timeToActivatePendingBonus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeToRedeemActiveBonus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeToAcceptAwardedBonus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeToMeetConditionsForWaitingBonus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeToStartContributingToWR": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeToUseFreeSpins": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bonusFixedExpiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "bonusCurrentExpiryCondition": {
            "type": "string",
            "nullable": true
          },
          "bonusCurrentExpiryConditionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDateReal": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fromDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "toDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BonusProductTypeSummary": {
        "type": "object",
        "properties": {
          "bonusBalance": {
            "type": "number",
            "description": "Bonus balance summary for product type",
            "format": "decimal"
          },
          "productTypeId": {
            "type": "integer",
            "description": "Product type ID",
            "format": "int32"
          },
          "productTypeName": {
            "type": "string",
            "description": "Product type name",
            "nullable": true
          },
          "freeSpins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BonusFreeSpins"
            },
            "description": "List of Free spin values for free spin bonuses",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BonusSchedulingData": {
        "type": "object",
        "properties": {
          "timeToActivatePendingBonus": {
            "type": "integer",
            "description": "Days till activate pending bonus",
            "format": "int32",
            "nullable": true
          },
          "timeToRedeemActiveBonus": {
            "type": "integer",
            "description": "Days till redeem active bonus",
            "format": "int32",
            "nullable": true
          },
          "timeToAcceptAwardedBonus": {
            "type": "integer",
            "description": "Days till accept awarded bonus",
            "format": "int32",
            "nullable": true
          },
          "timeToMeetConditionsForWaitingBonus": {
            "type": "integer",
            "description": "Days till meeting condition for waiting bonus",
            "format": "int32",
            "nullable": true
          },
          "timeToStartContributingToWR": {
            "type": "integer",
            "description": "Days till bonus starts contributing to WR",
            "format": "int32",
            "nullable": true
          },
          "timeToUseFreeSpins": {
            "type": "integer",
            "description": "Time to use free spins for awarded external bonus",
            "format": "int32",
            "nullable": true
          },
          "bonusFixedExpiryDate": {
            "type": "string",
            "description": "Returns bonus fixed expirty date",
            "format": "date-time",
            "nullable": true
          },
          "bonusCurrentExpiryCondition": {
            "type": "string",
            "description": "Configuration value towards which condition bonus goes",
            "nullable": true
          },
          "bonusCurrentExpiryConditionDate": {
            "type": "string",
            "description": "Return date when bonus will expire from configured condition",
            "format": "date-time",
            "nullable": true
          },
          "expirationDateReal": {
            "type": "string",
            "description": "When the bonus expiration date will accure from expiryJob",
            "format": "date-time",
            "nullable": true
          },
          "expirationReason": {
            "type": "string",
            "description": "Reason why bonus expired",
            "nullable": true
          },
          "fromDate": {
            "type": "string",
            "description": "Bonus start date",
            "format": "date-time",
            "nullable": true
          },
          "toDate": {
            "type": "string",
            "description": "Bonus end date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BonusSettingsData": {
        "type": "object",
        "properties": {
          "isBonusRequiresOptIn": {
            "type": "boolean",
            "description": "Bonus requiers player opt-in (bonus is linked to a promotion)",
            "nullable": true
          },
          "isAutomaticBonus": {
            "type": "boolean",
            "description": "Bonus awarding type (automatic or manual)",
            "nullable": true
          },
          "isRecurringBonus": {
            "type": "boolean",
            "description": "Whether bonus is recurring or not",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelWithdrawalRequest": {
        "required": [
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "minLength": 1,
            "type": "string",
            "description": "Id of the created transaction."
          },
          "cancelReason": {
            "type": "string",
            "description": "Reason why the payment was canceled.",
            "nullable": true
          },
          "testMode": {
            "type": "boolean",
            "description": "Send true for testing purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Cancel withdrawal request"
      },
      "CancelWithdrawalResponse": {
        "type": "object",
        "properties": {
          "paymentStatus": {
            "type": "string",
            "description": "Indicates the status of the cancelled withdrawal.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Id of the created transaction.",
            "nullable": true
          },
          "externalErrorCode": {
            "type": "string",
            "description": "External error code.",
            "nullable": true
          },
          "externalErrorMessage": {
            "type": "string",
            "description": "External error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Cancel withdrawal return"
      },
      "CategoryTypeEnum": {
        "enum": [
          "Menu",
          "Lobby",
          "Console",
          "Other",
          "Dynamic"
        ],
        "type": "string",
        "description": "Category type.\r\nPossible values:\r\n* Menu,\r\n* Lobby,\r\n* Console,\r\n* Other,\r\n* Dynamic"
      },
      "ChangeForgottenPasswordRequest": {
        "required": [
          "newPassword",
          "secureKey"
        ],
        "type": "object",
        "properties": {
          "secureKey": {
            "minLength": 1,
            "type": "string",
            "description": "Secure key should be received via the player's email"
          },
          "newPassword": {
            "minLength": 1,
            "type": "string",
            "description": "New password, to replace the forgotten one"
          }
        },
        "additionalProperties": false,
        "description": "Change Forgotten Password Request"
      },
      "ChangeMessageTypeEnum": {
        "enum": [
          "Read",
          "Unread"
        ],
        "type": "string",
        "description": "Message type to change message to read or unread"
      },
      "ChangePlayerPasswordAuthRequest": {
        "required": [
          "cpfNumber"
        ],
        "type": "object",
        "properties": {
          "cpfNumber": {
            "minLength": 1,
            "type": "string",
            "description": "CPF number"
          },
          "oldPassword": {
            "type": "string",
            "description": "Old password",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePlayerPasswordRequest": {
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "minLength": 1,
            "type": "string",
            "description": "Old Passord"
          },
          "newPassword": {
            "minLength": 1,
            "type": "string",
            "description": "New Password"
          }
        },
        "additionalProperties": false,
        "description": "Change Player Password Request"
      },
      "CheckUserRegistrationReturn": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "Player id",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClaimRewardBonusRequest": {
        "required": [
          "requiredPoints",
          "rewardId"
        ],
        "type": "object",
        "properties": {
          "rewardId": {
            "type": "integer",
            "description": "Id of the reward to be claimed",
            "format": "int32"
          },
          "requiredPoints": {
            "type": "integer",
            "description": "Required points for the reward that were displayed to the player\r\n\r\nIf the value is different that the reward's actual required points then the reward won't be claimed and an error will be returned. This could happen if the required points of the reward were changed while the player was viewing rewards.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClaimRewardItemRequest": {
        "required": [
          "requiredPoints",
          "rewardId"
        ],
        "type": "object",
        "properties": {
          "rewardId": {
            "type": "integer",
            "description": "Id of the reward to be claimed",
            "format": "int32"
          },
          "requiredPoints": {
            "type": "integer",
            "description": "Required points for the reward that were displayed to the player\r\n\r\nIf the value is different that the reward's actual required points then the reward won't be claimed and an error will be returned. This could happen if the required points of the reward were changed while the player was viewing rewards.",
            "format": "int32"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/ClaimRewardItemRequestShippingAddress"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClaimRewardItemRequestShippingAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the recipient",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "description": "Contact number of the recipient",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email of the recipient",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Street address of the recipient",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City of the recipient",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "description": "Postcode of the recipient",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country of the recipient",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClaimedReward": {
        "type": "object",
        "properties": {
          "playerRewardId": {
            "type": "integer",
            "format": "int32"
          },
          "rewardId": {
            "type": "integer",
            "format": "int32"
          },
          "claimedDate": {
            "type": "string",
            "format": "date-time"
          },
          "rewardType": {
            "$ref": "#/components/schemas/RewardTypeEnum"
          },
          "rewardName": {
            "type": "string",
            "nullable": true
          },
          "rewardDescription": {
            "type": "string",
            "nullable": true
          },
          "requiredPoints": {
            "type": "number",
            "format": "decimal"
          },
          "playerRewardStatus": {
            "$ref": "#/components/schemas/PlayerRewardStatusEnum"
          },
          "awardedAmount": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactInfoType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contact info type id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Contact info type name",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ContactInfoTypeEnum"
          }
        },
        "additionalProperties": false,
        "description": "Contact info type"
      },
      "ContactInfoTypeEnum": {
        "enum": [
          "Phone",
          "IM"
        ],
        "type": "string",
        "description": "Contact info type\r\nPossible values:\r\n* Phone,\r\n* IM"
      },
      "ContactInfoVerificationStatusResponse": {
        "type": "object",
        "properties": {
          "contactInfoVerificationStatus": {
            "type": "string",
            "description": "Contact info verification status:\r\n* Verified\r\n* NotVerified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact info verification status response"
      },
      "ContactPrefChannels": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean",
            "description": "If the player specifies email as the contact channel."
          },
          "sms": {
            "type": "boolean",
            "description": "If the player specifies SMS as the contact channel."
          },
          "post": {
            "type": "boolean",
            "description": ""
          },
          "telephone": {
            "type": "boolean",
            "description": "If the player specifies telephone as the contact channel."
          },
          "im": {
            "type": "boolean",
            "description": "If the player specifies IM as the contact channel."
          },
          "popupInbox": {
            "type": "boolean",
            "description": "If the player specifies popup inbox as the contact channel."
          }
        },
        "additionalProperties": false,
        "description": "In case this property is set, then populating it's fields is mandatory."
      },
      "ContentData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Banner ID",
            "format": "int64"
          },
          "contentType": {
            "$ref": "#/components/schemas/ContentTypeEnum"
          },
          "name": {
            "type": "string",
            "description": "Banner name",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatusEnum"
          },
          "brandId": {
            "type": "integer",
            "description": "Brand ID",
            "format": "int32"
          },
          "htmlBody": {
            "type": "string",
            "description": "HTML body",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "description": "Template ID",
            "format": "int32",
            "nullable": true
          },
          "subStatus": {
            "$ref": "#/components/schemas/ContentSubStatusEnum"
          },
          "categoryId": {
            "type": "integer",
            "description": "Banner category ID",
            "format": "int32"
          },
          "contentFieldValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentFieldValue"
            },
            "description": "List of content field values",
            "nullable": true
          },
          "labelIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of label IDs",
            "nullable": true
          },
          "contentSchedule": {
            "$ref": "#/components/schemas/ContentSchedule"
          },
          "contentSeos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentSeo"
            },
            "description": "List of content SEOs",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "Order position",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Content data"
      },
      "ContentFieldValue": {
        "type": "object",
        "properties": {
          "languageId": {
            "type": "integer",
            "description": "Language ID",
            "format": "int32",
            "nullable": true
          },
          "fieldId": {
            "type": "integer",
            "description": "Field ID",
            "format": "int32",
            "nullable": true
          },
          "field": {
            "$ref": "#/components/schemas/Field"
          },
          "value": {
            "type": "string",
            "description": "Value ID",
            "nullable": true
          },
          "mediaFileId": {
            "type": "integer",
            "description": "Media file ID",
            "format": "int64",
            "nullable": true
          },
          "mediaFile": {
            "$ref": "#/components/schemas/MediaFile"
          }
        },
        "additionalProperties": false,
        "description": "Content field value"
      },
      "ContentSchedule": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Content schedule"
      },
      "ContentSeo": {
        "type": "object",
        "properties": {
          "languageId": {
            "type": "integer",
            "description": "Language ID",
            "format": "int32"
          },
          "seo": {
            "type": "string",
            "description": "SEO value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Content SEO"
      },
      "ContentStatusEnum": {
        "enum": [
          "Unpublished",
          "Published",
          "Archived"
        ],
        "type": "string",
        "description": "Content status enumeration"
      },
      "ContentSubStatusEnum": {
        "enum": [
          "Active",
          "Inactive",
          "Expired"
        ],
        "type": "string",
        "description": "Content sub-status enumeration"
      },
      "ContentTypeEnum": {
        "enum": [
          "Ticker",
          "Banner",
          "Promotion",
          "Game"
        ],
        "type": "string",
        "description": "Content type enumeration"
      },
      "Country": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Country code in Alpha-2 ISO 3166-1 standard.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Country name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePaymentResponse": {
        "type": "object",
        "properties": {
          "redirectURL": {
            "type": "string",
            "description": "URL to redirect the player to in case of additional external authorization.",
            "nullable": true
          },
          "webMethod": {
            "type": "string",
            "description": "Method for launching.",
            "nullable": true
          },
          "confirmRequired": {
            "type": "boolean",
            "description": "If the request has been confirmed (true/false).",
            "nullable": true
          },
          "declineReason": {
            "type": "string",
            "description": "Reason why the payment was declined.",
            "nullable": true
          },
          "declineReasonCode": {
            "type": "string",
            "description": "Reason code why the payment was declined.",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional information about the deposit (depending on the payment instrument used).",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Id of the created transaction",
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "description": "Status of the created payment.",
            "nullable": true
          },
          "externalErrorCode": {
            "type": "string",
            "description": "External error code.",
            "nullable": true
          },
          "externalErrorMessage": {
            "type": "string",
            "description": "External error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create payment return."
      },
      "CreatePlayer": {
        "required": [
          "countryCode",
          "currencyCode",
          "dateOfBirth",
          "eMail",
          "firstName",
          "lastName",
          "locale",
          "password",
          "portalId",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "Username, 15 charaters maximum."
          },
          "password": {
            "maxLength": 30,
            "minLength": 6,
            "type": "string",
            "description": "Password, 6 characters minimum, 30 characters maximum.\r\nIMPORTANT: client implementation is responsible for assuring password complexity."
          },
          "eMail": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Valid email address, 50 characters maximum.",
            "format": "email"
          },
          "firstName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "First name, 2 characters minimum, 50 characters maximum."
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "Last name, 2 characters minimum, 50 characters maximum."
          },
          "middleName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Middle name, optional. 50 characters maximum.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in ISO format (YYYY-MM-DD).",
            "format": "date"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "street": {
            "maxLength": 130,
            "minLength": 0,
            "type": "string",
            "description": "Street name, optional. 130 characters maximum.",
            "nullable": true
          },
          "houseNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "House number, optional. 30 characters maximum.",
            "nullable": true
          },
          "city": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "City, optional. 50 characters maximum.",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Post code, optional. 50 characters maximum.",
            "nullable": true
          },
          "stateProvince": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "State province, optional. 50 characters maximum.",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Country code in Alpha-2 ISO 3166-1 standard.\r\nSee `GetCountries` for list of supported countries."
          },
          "portalId": {
            "type": "integer",
            "description": "Portal id. See `GetPortals` for list of supported locales.",
            "format": "int32"
          },
          "currencyCode": {
            "maxLength": 10,
            "minLength": 3,
            "type": "string",
            "description": "Currency code in ISO 4217 standard.\r\nSee `GetCurrencies` for list of supported currencies."
          },
          "locale": {
            "maxLength": 5,
            "minLength": 2,
            "type": "string",
            "description": "Locale.\r\nSee `GetLanguages` for list of supported locales."
          },
          "title": {
            "type": "integer",
            "description": "Title used to address the player.\r\nSee `GetTitles` for more details.",
            "format": "int32",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "mobilePhone": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true
          },
          "secretQuestionId": {
            "type": "integer",
            "description": "Secret question, used for security purposes.\r\nSee `GetSecretQuestions` for more details.",
            "format": "int32",
            "nullable": true
          },
          "secretAnswer": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Secret answer, used for security purposes. 255 characters maximum",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon code for bonuses.\r\nNOTICE: this will be overriden if the `CouponCode` is set in the `TrackingSource` object.",
            "nullable": true
          },
          "receiveNews": {
            "type": "boolean",
            "description": "Flag indicating whether the player wants to receive marketing offers and bonuses.",
            "nullable": true
          },
          "nickname": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "Nickname, 50 characters maximum (numbers, letters, `-`, and `_`).",
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "description": "Product type id.\r\n            \r\nAdditional registration info. Portal provides Id for the selected product type id, from where registration is triggered. If provided its being validated againts existing product type within IGS.\r\nSee `GetProductTypes` for more details.",
            "format": "int32",
            "nullable": true
          },
          "ignoreInternalAccountsWhiteListSetting": {
            "type": "boolean",
            "description": "Flag that indicates that player will not be market as internal, although it was created from a whitelisted device or IP.",
            "nullable": true
          },
          "instantMessenger": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Instant messenger handle.",
            "nullable": true
          },
          "instantMessengerType": {
            "type": "integer",
            "description": "Instant messenger type.\r\nSee `GetContactInfoTypes` for more details.",
            "format": "int32",
            "nullable": true
          },
          "customParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional custom parameters.",
            "nullable": true
          },
          "useMFA": {
            "type": "boolean",
            "description": "Flag indicating whether multi-factor authentication should be enabled.",
            "nullable": true
          },
          "receiveSMSFromOperator": {
            "type": "boolean",
            "description": "Flag indicating whether the player wants to receive SMS from operator.",
            "nullable": true
          },
          "receiveEmailFromOperator": {
            "type": "boolean",
            "description": "Flag indicating whether the player wants to receive e-mail from operator.",
            "nullable": true
          },
          "tcVersion": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Terms and Conditions version that the player agreed to at register time.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create player data."
      },
      "Currency": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Currency code in ISO 4217 standard.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Currency name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CurrentTermsAndConditionsResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Terms and conditions template version.",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "description": "Terms and conditions template language.\r\nSee `GetLanguages` for list of supported locales.",
            "nullable": true
          },
          "termsAndConditionsContent": {
            "type": "string",
            "description": "Content of the terms and conditions.",
            "nullable": true
          },
          "isHtmlContent": {
            "type": "boolean",
            "description": "Info which shows if terms and conditions template is in html format.",
            "nullable": true
          },
          "termsAndConditionsTitle": {
            "type": "string",
            "description": "Title of terms and conditions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Current terms and conditions return."
      },
      "CustomContent": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "Language of this custom content  (empty = ALL)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the content",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "Content Value",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeclineMultiChoiceBonusRequest": {
        "required": [
          "bonusGroupId"
        ],
        "type": "object",
        "properties": {
          "bonusGroupId": {
            "type": "integer",
            "description": "Bonus Group ID",
            "format": "int32"
          },
          "groupInstanceId": {
            "type": "string",
            "description": "Group Instance Id",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeclinePlayerBonusContextRequest": {
        "required": [
          "playerBonusContextId"
        ],
        "type": "object",
        "properties": {
          "playerBonusContextId": {
            "type": "integer",
            "description": "Player bonus context ID",
            "format": "int32"
          },
          "declineRecurrence": {
            "type": "boolean",
            "description": "Player wants to decline recurrence or only single context",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentCategoryEnum": {
        "enum": [
          "PhotoId",
          "ProofOfAdress",
          "ProofOfPaymentMethod",
          "DepositDeclaration",
          "Miscellaneous",
          "UploadedFromPortal"
        ],
        "type": "string"
      },
      "DocumentsResponse": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerDocument"
            },
            "description": "Array of information on users uploaded documents",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of records in \"Documents\" array",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contact info verification status response"
      },
      "EnumGameIdResponse": {
        "type": "object",
        "properties": {
          "gameListIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of game IDs.",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Enum game id response."
      },
      "ExcludePlayerRequest": {
        "required": [
          "excludedUntil"
        ],
        "type": "object",
        "properties": {
          "excludedUntil": {
            "type": "string",
            "description": "Until the player is self-excluded. Date must be between SelfExcludeMinDays (180) and SelfExcludeMaxDays (1825).",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Exclude player request."
      },
      "FaceAuthProcessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/FaceAuthenticationProcessStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "FaceAuthResponse": {
        "type": "object",
        "properties": {
          "cafId": {
            "type": "string",
            "description": "Caf id to be used in facial authentication status check",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Url to open to the player",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaceAuthUpdatePlayerRequest": {
        "required": [
          "eMail",
          "firstName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Player ID.",
            "format": "int64"
          },
          "eMail": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Valid email address, 50 characters maximum.",
            "format": "email"
          },
          "firstName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "First name, 2 characters minimum, 50 characters maximum."
          },
          "city": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "City, 50 characters maximum.",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Post code, optional. 50 characters maximum.",
            "nullable": true
          },
          "mobilePhone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true
          },
          "street": {
            "maxLength": 130,
            "minLength": 0,
            "type": "string",
            "description": "Street name, optional. 130 characters maximum.",
            "nullable": true
          },
          "houseNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "House number, optional. 30 characters maximum.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Update player via face auth"
      },
      "FaceAuthenticationProcessStatusEnum": {
        "enum": [
          "Processing",
          "Rejected",
          "Approved",
          "Unknown"
        ],
        "type": "string"
      },
      "Field": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Field ID",
            "format": "int32"
          },
          "contentType": {
            "$ref": "#/components/schemas/ContentTypeEnum"
          },
          "fieldTypeId": {
            "type": "integer",
            "description": "Field type ID",
            "format": "int32"
          },
          "translatable": {
            "type": "boolean",
            "description": "Is field translatable"
          },
          "name": {
            "type": "string",
            "description": "Field name",
            "nullable": true
          },
          "placeholderText": {
            "type": "string",
            "description": "Placeholder text",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Field order",
            "format": "int32",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "description": "Is field visible",
            "nullable": true
          },
          "fieldType": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "additionalProperties": false,
        "description": "Field"
      },
      "FieldType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "$ref": "#/components/schemas/ValueTypeEnum"
          }
        },
        "additionalProperties": false,
        "description": "Field type"
      },
      "ForgotPasswordFaceAuthRequest": {
        "required": [
          "cpfNumber",
          "portalId"
        ],
        "type": "object",
        "properties": {
          "cpfNumber": {
            "minLength": 1,
            "type": "string",
            "description": "CPF number"
          },
          "email": {
            "type": "string",
            "description": "The player's email",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The player's date of birth\r\n            \r\nThis parameter is optional and configurable.",
            "format": "date-time"
          },
          "secretQuestionId": {
            "type": "string",
            "description": "The secret question id which the player uses for password resetting, to get all secret question id's use globalization/secret-questions\r\n            \r\nThis parameter is optional and configurable.",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "description": "Player's answer to his specified secret question\r\n            \r\nThis parameter is optional and configurable.",
            "nullable": true
          },
          "portalId": {
            "type": "integer",
            "description": "Portal id",
            "format": "int32"
          },
          "domain": {
            "type": "string",
            "description": "Domain, this parameter is optional\r\n            \r\nThis parameter is optional and configurable.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForgotUsernameRequest": {
        "required": [
          "email",
          "portalId"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Player's email"
          },
          "secretQuestionId": {
            "type": "integer",
            "description": "Playe's secret question id\r\n\r\nUse `globalization/secret-questions` to get a list of all secret questions",
            "format": "int32",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "description": "The answer to the secret question",
            "nullable": true
          },
          "portalId": {
            "type": "integer",
            "description": "Portal id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Player forgot username request"
      },
      "GameCategoriesResponse": {
        "type": "object",
        "properties": {
          "gameCategoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameCategory"
            },
            "description": "List of game categories",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Record count",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Game category id",
            "format": "int32"
          },
          "portalId": {
            "type": "integer",
            "description": "Portal id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Game category name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Game category description",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "description": "Game category tag",
            "nullable": true
          },
          "categoryTypeId": {
            "$ref": "#/components/schemas/CategoryTypeEnum"
          },
          "parentId": {
            "type": "integer",
            "description": "Game category parent id",
            "format": "int32",
            "nullable": true
          },
          "parentName": {
            "type": "string",
            "description": "Game category parent name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameCycleStatusEnum": {
        "enum": [
          "Active",
          "Finished",
          "Voided"
        ],
        "type": "string",
        "description": "Game status.\r\n\r\nPossible values:\r\n* Active, \r\n* Finished,\r\n* Voided"
      },
      "GameMain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Game ID.",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "External game ID.",
            "nullable": true
          },
          "productSupplierId": {
            "type": "integer",
            "description": "Product supplier ID.",
            "format": "int32",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "description": "Product ID.",
            "format": "int32",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Game name.",
            "nullable": true
          },
          "gameName": {
            "type": "string",
            "description": "Name of game.",
            "nullable": true
          },
          "demoPlayRestricted": {
            "type": "boolean",
            "description": "Flag indicating whether game supports free play.",
            "nullable": true
          },
          "realPlayRestricted": {
            "type": "boolean",
            "description": "Flag indicating whether game supports real play.",
            "nullable": true
          },
          "maintenanceModeEnabled": {
            "type": "boolean",
            "description": "Flag indicating whether the game is in maintenance.",
            "nullable": true
          },
          "progressiveJackpots": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Progressive Jackpot IDs, associated with the game.",
            "nullable": true
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameMainTranslation"
            },
            "description": "List of translations.",
            "nullable": true
          },
          "gameTypeName": {
            "type": "string",
            "description": "Game type name.",
            "nullable": true
          },
          "gameTypeId": {
            "type": "integer",
            "description": "Game type ID.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of games in the category."
      },
      "GameMainTranslation": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "Name of the field.",
            "nullable": true
          },
          "fieldTranslation": {
            "type": "string",
            "description": "Translated string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of translations"
      },
      "GameNotSecureRequest": {
        "required": [
          "extGameId",
          "isNative",
          "portalId"
        ],
        "type": "object",
        "properties": {
          "portalId": {
            "type": "integer",
            "description": "Portal Id",
            "format": "int32"
          },
          "extGameId": {
            "minLength": 1,
            "type": "string",
            "description": "External game id to start game."
          },
          "isNative": {
            "type": "boolean",
            "description": "True (adds isNative=true at the end of game launch url), False (/)."
          },
          "language": {
            "type": "string",
            "description": "Player's current (selected) language.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Game Not Secure Request"
      },
      "GameParameters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter name",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Parameter value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Game Parameters"
      },
      "GamesModel": {
        "type": "object",
        "properties": {
          "gameId": {
            "type": "integer",
            "description": "Internal game ID",
            "format": "int32"
          },
          "externalGameId": {
            "type": "string",
            "description": "External game ID",
            "nullable": true
          },
          "gameName": {
            "type": "string",
            "description": "Internal game name",
            "nullable": true
          },
          "supplierGameName": {
            "type": "string",
            "description": "Supplier game name",
            "nullable": true
          },
          "channelName": {
            "type": "string",
            "description": "Channel name like \"Internet\", \"Mobile\"...",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GenderEnum": {
        "enum": [
          "Male",
          "Female"
        ],
        "type": "string"
      },
      "GeoLocationCheckRequest": {
        "required": [
          "deviceFingerprint"
        ],
        "type": "object",
        "properties": {
          "deviceFingerprint": {
            "minLength": 1,
            "type": "string",
            "description": "Fingerprint of the device."
          }
        },
        "additionalProperties": false
      },
      "GeoLocationCheckResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "string",
            "description": "Geolocation status code",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllRewardsResponse": {
        "type": "object",
        "properties": {
          "rewardList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardData"
            },
            "description": "Reward list",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetBalanceResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "description": "List of accounts (wallets).",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get balance return"
      },
      "GetBetHistoryResponse": {
        "type": "object",
        "properties": {
          "historyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Betinfo"
            },
            "description": "List of history bets",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get bet history return"
      },
      "GetBonusResponse": {
        "type": "object",
        "properties": {
          "bonusBalance": {
            "type": "number",
            "description": "Bonus balance",
            "format": "decimal"
          },
          "bonusSummaryPerProductType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BonusProductTypeSummary"
            },
            "description": "Bonus summary per product type",
            "nullable": true
          },
          "playerBonusHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerBonusHistory"
            },
            "description": "Bonus history",
            "nullable": true
          },
          "responseCreatedDate": {
            "type": "string",
            "description": "Response created timestamp",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetBonusesAvailableForOptInReturn": {
        "type": "object",
        "properties": {
          "bonusBalance": {
            "type": "number",
            "format": "decimal"
          },
          "playerOptInBonuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOptInBonus"
            },
            "nullable": true
          },
          "responseCreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetClaimableRewardsResponse": {
        "type": "object",
        "properties": {
          "rewardList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardData"
            },
            "description": "Reward list",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetClaimedRewardsResponse": {
        "type": "object",
        "properties": {
          "claimedRewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimedReward"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetContactInfoTypeResponse": {
        "type": "object",
        "properties": {
          "contactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoType"
            },
            "description": "List of contact info types",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get contact info type return"
      },
      "GetGameHistoryResponse": {
        "type": "object",
        "properties": {
          "historyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/History"
            },
            "description": "Player's game history list.",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get game history response."
      },
      "GetGameMainsResponse": {
        "type": "object",
        "properties": {
          "gameMainList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameMain"
            },
            "description": "List of Games.",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetGameParametersResponse": {
        "type": "object",
        "properties": {
          "gameParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameParameters"
            },
            "description": "List of parameter names and values",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of parameters",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetMessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/MessageExtended"
          }
        },
        "additionalProperties": false,
        "description": "Get message return"
      },
      "GetMessagesResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageExtended"
            },
            "description": "List of messages",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get messages return"
      },
      "GetPlayerContactPreferencesResponse": {
        "type": "object",
        "properties": {
          "receiveEmailFromOperator": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive emails from operator."
          },
          "receiveSMSFromOperator": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive sms from operator."
          },
          "receiveExclusiveOffersAndBonuses": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive exclusive offers and bonuses."
          },
          "receiveEmailFromThirdParty": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive email from third party."
          },
          "receiveSMSFromThirdParty": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive sms from third party."
          },
          "blockAll": {
            "type": "boolean",
            "description": "Block all."
          },
          "doNotCall": {
            "type": "boolean",
            "description": "Do not call the player."
          },
          "optinProfiling": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to opt-in for profiling."
          },
          "receiveLandBasedRetailInfo": {
            "type": "boolean",
            "description": "Receive land-based retail info."
          },
          "receiveLoginNotification": {
            "type": "boolean",
            "description": "Receive login notification."
          },
          "contactPrefChannels": {
            "$ref": "#/components/schemas/ContactPrefChannels"
          },
          "productTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTypeParamExtended"
            },
            "description": "List of product types.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get player contact preferences response."
      },
      "GetPlayerLimit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the limit.",
            "format": "int64"
          },
          "limitType": {
            "$ref": "#/components/schemas/LimitTypeEnum"
          },
          "limitStatus": {
            "$ref": "#/components/schemas/LimitStatusEnum"
          },
          "time": {
            "$ref": "#/components/schemas/TimeTypeEnum"
          },
          "amountValue": {
            "type": "number",
            "description": "Amount of the limit, unit is defined by LimitType.",
            "format": "decimal",
            "nullable": true
          },
          "amountLeft": {
            "type": "number",
            "description": "Amount of the limit left.",
            "format": "decimal",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "description": "If the limit is locked. If it's then set it to true, if not then set it to false."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the limit.",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "description": "Date of limit creation.",
            "format": "date-time"
          },
          "dateActivated": {
            "type": "string",
            "description": "Date of limit activation.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A player's limit, regarding single bet, game session duration, total wager and lost.\r\n\r\nEach of the LimitType can have two two entries in the return list(one active, and one pending)."
      },
      "GetPlayerSegmentsResponse": {
        "type": "object",
        "properties": {
          "segmentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of marketing segments player is in",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get player segments response."
      },
      "GetPlayerTransactionsRequest": {
        "required": [
          "fromDate",
          "pageNumber",
          "pageSize",
          "toDate"
        ],
        "type": "object",
        "properties": {
          "withManualTransactions": {
            "type": "boolean",
            "description": "Manual transactions"
          },
          "retrieveChildTransactions": {
            "type": "boolean",
            "description": "Retrieve child transactions"
          },
          "fromDate": {
            "type": "string",
            "description": "Beginning date of transaction",
            "format": "date-time"
          },
          "toDate": {
            "type": "string",
            "description": "End date of transaction",
            "format": "date-time"
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of entries on page",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "description": "Number of the page",
            "format": "int32"
          },
          "transactionType": {
            "$ref": "#/components/schemas/PaymentTransactionTypeEnum"
          }
        },
        "additionalProperties": false,
        "description": "Get player transactions request"
      },
      "GetPlayerTransactionsResponse": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "List of transaction",
            "nullable": true
          },
          "recordcount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          },
          "recordsLimitExceeded": {
            "type": "boolean",
            "description": "Records limit exceeded"
          }
        },
        "additionalProperties": false,
        "description": "Get player transactions return"
      },
      "GetPopupsResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPreGameMessagesResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageExtended"
            },
            "description": "List of Messages.",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Returns the pregame message response."
      },
      "GetRestrictionsResponse": {
        "type": "object",
        "properties": {
          "productAvailability": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAvailability"
            },
            "description": "List of availabilities for different products",
            "nullable": true
          },
          "productSupplierAvailability": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSupplierAvailability"
            },
            "description": "List of product supplier availabilities information",
            "nullable": true
          },
          "portalAvailability": {
            "$ref": "#/components/schemas/PortalAvailability"
          }
        },
        "additionalProperties": false,
        "description": "Restrictions response"
      },
      "GetSecretQuestionsResponse": {
        "type": "object",
        "properties": {
          "secretQuestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretQuestion"
            },
            "description": "List of secret questions",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get secret questions return"
      },
      "GetTitlesResponse": {
        "type": "object",
        "properties": {
          "titles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Title"
            },
            "description": "Get titles return",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetUnreadMessagesCountResponse": {
        "type": "object",
        "properties": {
          "unreadCount": {
            "type": "integer",
            "description": "The number of unread messages.",
            "format": "int32",
            "nullable": true
          },
          "unreadPopupCount": {
            "type": "integer",
            "description": "The number of unread messages in the pop-up.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get unread messages count return."
      },
      "History": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Game cycle Id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Game name.",
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Game start time.",
            "format": "date-time",
            "nullable": true
          },
          "stop": {
            "type": "string",
            "description": "Game stop time.",
            "format": "date-time",
            "nullable": true
          },
          "stake": {
            "type": "number",
            "description": "Bet value.",
            "format": "decimal",
            "nullable": true
          },
          "won": {
            "type": "number",
            "description": "Won value - Total/Net depends on bonus configuration.",
            "format": "decimal",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "description": "Game/Bet description.",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/GameCycleStatusEnum"
          },
          "productType": {
            "type": "string",
            "description": "Product type (Casino, Poker, SportsBook).",
            "nullable": true
          },
          "externalGameId": {
            "type": "string",
            "description": "External game Id.",
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name.",
            "nullable": true
          },
          "productSupplier": {
            "type": "string",
            "description": "Product supplier.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of history."
      },
      "ICoreAggregatedBonusStatusDtoEnum": {
        "enum": [
          "Available",
          "Active",
          "Success",
          "Failed",
          "Other"
        ],
        "type": "string"
      },
      "LevelDataGameMain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the category.",
            "format": "int64",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "description": "ID of the parent category.",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Category name.",
            "nullable": true
          },
          "gameName": {
            "type": "string",
            "description": "Name of game.",
            "nullable": true
          },
          "subLevel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LevelDataGameMain"
            },
            "description": "List of sub-categories.",
            "nullable": true
          },
          "gameMains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameMain"
            },
            "description": "List of games in the category.",
            "nullable": true
          },
          "levelType": {
            "$ref": "#/components/schemas/LevelTypeEnum"
          }
        },
        "additionalProperties": false,
        "description": "List of categories."
      },
      "LevelTypeEnum": {
        "enum": [
          "MenuCategory",
          "LobbyCategory",
          "Console",
          "Other",
          "Dynamic"
        ],
        "type": "string"
      },
      "LimitStatusEnum": {
        "enum": [
          "Active",
          "Pending",
          "Canceled",
          "Expired"
        ],
        "type": "string",
        "description": "Possible limit statuses.\r\n\r\nPossible  values:\r\n* Active,\r\n* Pending,\r\n* Canceled,\r\n* Expired"
      },
      "LimitTypeEnum": {
        "enum": [
          "TotalWager",
          "TotalLost",
          "GameSessionDuration",
          "MaxSingleBet",
          "Deposit",
          "SiteSessionDuration"
        ],
        "type": "string",
        "description": "Types of player limits.\r\n\r\nPossible  values:\r\n* TotalWager,\r\n* TotalLost,\r\n* GameSessionDuration,\r\n* MaxSingleBet,\r\n* Deposit,\r\n* SiteSessionDuration"
      },
      "LoginAuthRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "password",
          "portalId",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 1,
            "type": "string",
            "description": "Player's username.\r\nIn case that the product’s login type is specified as Nickname or Email, username parameter can also be filled out with player nickname or email."
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "Player's password."
          },
          "portalId": {
            "type": "integer",
            "description": "Portal ID in which the player will login.",
            "format": "int32"
          },
          "deviceFingerprint": {
            "type": "string",
            "description": "Device fingerprint",
            "nullable": true
          },
          "includeNotifications": {
            "type": "boolean",
            "description": "Flag indicating whether to include notifications.",
            "nullable": true
          },
          "mobileClient": {
            "type": "boolean",
            "description": "Flag indicating whether the player's client device is mobile.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "List of messages",
            "nullable": true
          },
          "logonSession": {
            "$ref": "#/components/schemas/LogonSession"
          },
          "failedLoginCount": {
            "type": "integer",
            "description": "Failed login count",
            "format": "int32",
            "nullable": true
          },
          "lastLoginTime": {
            "type": "string",
            "description": "Last login time",
            "format": "date-time",
            "nullable": true
          },
          "lastLoginIp": {
            "type": "string",
            "description": "Last login IP",
            "nullable": true
          },
          "playerToken": {
            "type": "string",
            "description": "Player token.\r\nUsed when player data is incomplete or change username is required.",
            "nullable": true
          },
          "isPlayerCreatedByAgent": {
            "type": "boolean",
            "description": "Flag indicating whether the player is created by agent",
            "nullable": true
          },
          "tracking": {
            "$ref": "#/components/schemas/TrackingData"
          },
          "statusCode": {
            "type": "string",
            "description": "Status code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogonSession": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "Session token",
            "nullable": true
          },
          "playerId": {
            "type": "integer",
            "description": "Player ID",
            "format": "int64",
            "nullable": true
          },
          "logonTime": {
            "type": "string",
            "description": "Login time",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogonSessionDetail": {
        "type": "object",
        "properties": {
          "logonTime": {
            "type": "string",
            "description": "Player logon time.",
            "format": "date-time"
          },
          "logoutTime": {
            "type": "string",
            "description": "Player logout time.",
            "format": "date-time",
            "nullable": true
          },
          "clientIp": {
            "type": "string",
            "description": "Client IP.",
            "nullable": true
          },
          "realClientIp": {
            "type": "string",
            "description": "Real client IP.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code in Alpha-2 ISO 3166-1 standard.\r\nSee `GetCountries` for list of supported countries.",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/LogonSessionStatusEnum"
          }
        },
        "additionalProperties": false,
        "description": "Logon session detail."
      },
      "LogonSessionStatusEnum": {
        "enum": [
          "Active",
          "Closed",
          "Incomplete"
        ],
        "type": "string",
        "description": "Status of the player's logon session.\r\n\r\nPosible values:\r\n* Active,\r\n* Cloesed,\r\n* Incomplete."
      },
      "Loyalty": {
        "type": "object",
        "properties": {
          "vipLevel": {
            "type": "string",
            "description": "Current VIP level.",
            "nullable": true
          },
          "localizedVIPLevel": {
            "type": "string",
            "description": "Current VIP level (localized).",
            "nullable": true
          },
          "totalVIPPoints": {
            "type": "number",
            "description": "Total VIP points.",
            "format": "decimal"
          },
          "manuallySetVIPLevel": {
            "type": "string",
            "description": "Manualy set VIP level.",
            "nullable": true
          },
          "nextLevelQualificationDate": {
            "type": "string",
            "description": "Date when next qualification period begins.",
            "format": "date-time",
            "nullable": true
          },
          "vipPointsInPeriod": {
            "type": "number",
            "description": "VIP point earned in period.",
            "format": "decimal",
            "nullable": true
          },
          "pointsNeededForNextVIPLevel": {
            "type": "number",
            "description": "Point needed for next VIP level.",
            "format": "decimal",
            "nullable": true
          },
          "pointsNeededForCurrentVIPLevel": {
            "type": "number",
            "description": "Point needed for current VIP level.",
            "format": "decimal",
            "nullable": true
          },
          "currentVIPLevelQualificationDate": {
            "type": "string",
            "description": "When does qualification period end.",
            "format": "date-time",
            "nullable": true
          },
          "currentVIPLevelSustainmentDate": {
            "type": "string",
            "description": "When does sustainment period end.",
            "format": "date-time",
            "nullable": true
          },
          "nextVIPlevel": {
            "type": "string",
            "description": "What is the next level in sequence.",
            "nullable": true
          },
          "nextVIPLevelStatus": {
            "type": "integer",
            "description": "Status ID. If upgrade needs approval from BO:\r\n* 0 – approval not required,\r\n* 1 – approval required)",
            "format": "int32",
            "nullable": true
          },
          "pointsBalance": {
            "type": "number",
            "description": "Points balance.",
            "format": "decimal"
          },
          "pointsExpireOn": {
            "type": "string",
            "description": "When do points expire.",
            "format": "date-time",
            "nullable": true
          },
          "redemptionRate": {
            "type": "number",
            "description": "Redemption rate.",
            "format": "decimal"
          },
          "pointsRedemptionBlocked": {
            "type": "boolean",
            "description": "Is player blocked for points redemption.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency code in ISO 4217 standard.",
            "nullable": true
          },
          "bonusPoints": {
            "type": "number",
            "description": "Bonus points.",
            "format": "decimal"
          }
        },
        "additionalProperties": false,
        "description": "Loyalty details."
      },
      "LoyaltyDetailsResponse": {
        "type": "object",
        "properties": {
          "loyalty": {
            "$ref": "#/components/schemas/Loyalty"
          }
        },
        "additionalProperties": false,
        "description": "Loyalty details return."
      },
      "LoyaltyTransaction": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date time of the redeem transaction.",
            "format": "date-time"
          },
          "points": {
            "type": "number",
            "description": "Number of redeemed point.",
            "format": "decimal"
          },
          "pointType": {
            "type": "integer",
            "description": "Type of points.",
            "format": "int32"
          },
          "pointTypeName": {
            "type": "string",
            "description": "Name of type.",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "Conversion rate of redeemed points.",
            "format": "decimal",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Real money amount.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Loyalty transaction."
      },
      "MarketingSegmentTypeEnum": {
        "enum": [
          "Default",
          "ForWebUsage"
        ],
        "type": "string",
        "description": "Types of player segments.\r\n            \r\nPossible  values:\r\n* Default,\r\n* ForWebUsage"
      },
      "MediaFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Media file ID",
            "format": "int64",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "description": "Brand ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Media file name",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "description": "Media file extension",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "Media file path",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Media file external URL",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "description": "Media file size in bytes",
            "format": "int64",
            "nullable": true
          },
          "sizePretty": {
            "type": "string",
            "description": "Media file size beautified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Media file"
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Message id",
            "format": "int64",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PopupAction"
            },
            "description": "List of all actions",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Message title",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Created message date",
            "format": "date-time",
            "nullable": true
          },
          "contents": {
            "type": "string",
            "description": "Contents message",
            "nullable": true
          },
          "messageType": {
            "$ref": "#/components/schemas/MessageTypeEnum"
          },
          "messageSubtype": {
            "type": "string",
            "description": "Message subtype",
            "nullable": true
          },
          "messageGroup": {
            "type": "string",
            "description": "Message group",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Message"
      },
      "MessageExtended": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Message id",
            "format": "int64",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PopupAction"
            },
            "description": "List of all actions",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Message title",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Created message date",
            "format": "date-time",
            "nullable": true
          },
          "contents": {
            "type": "string",
            "description": "Contents message",
            "nullable": true
          },
          "messageType": {
            "$ref": "#/components/schemas/MessageTypeEnum"
          },
          "messageSubtype": {
            "type": "string",
            "description": "Message subtype",
            "nullable": true
          },
          "messageGroup": {
            "type": "string",
            "description": "Message group",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/PopupStateEnum"
          }
        },
        "additionalProperties": false
      },
      "MessageTypeEnum": {
        "enum": [
          "LoginPopup",
          "GameStartPopup",
          "WithdrawalPopup",
          "InboxNotification",
          "BlockPopup",
          "ConsolePopup"
        ],
        "type": "string",
        "description": "Message type\r\nPossible values:\r\n* LoginPopup,\r\n* GameStartPopup,\r\n* WithdrawalPopup,\r\n* InboxNotification,\r\n* BlockPopup,\r\n* ConsolePopup"
      },
      "MinMaxAmountData": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "min": {
            "type": "number",
            "description": "Minimum amount",
            "format": "decimal",
            "nullable": true
          },
          "max": {
            "type": "number",
            "description": "Maximum amount\r\nNOTE: null in case of AwardTimeType = Immediately",
            "format": "decimal",
            "nullable": true
          },
          "sequentialNumberOfDeposit": {
            "type": "integer",
            "description": "Sequential number of deposit which will trigger the awarding (present only for Deposit trigger type – 0 = any deposit)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultiChoiceBonusInfo": {
        "type": "object",
        "properties": {
          "bonusIncetiveId": {
            "type": "integer",
            "description": "Bonus incentive ID",
            "format": "int32"
          },
          "bonusIncetiveName": {
            "type": "string",
            "description": "Bonus incentive name",
            "nullable": true
          },
          "bonusIncetiveFriendlyName": {
            "type": "string",
            "description": "Bonus incentive friendly name",
            "nullable": true
          },
          "bonusIncetiveFriendlyDescription": {
            "type": "string",
            "description": "Bonus incentive friendly description",
            "nullable": true
          },
          "bonusMultiBonusChosen": {
            "type": "boolean",
            "description": "Is this multi-choice bonus chosen for awarding (chosen=true, declined=false, null=not yet chosen from this group)",
            "nullable": true
          },
          "bonusGroupId": {
            "type": "integer",
            "description": "Multi-choice bonus group ID",
            "format": "int32",
            "nullable": true
          },
          "playerBonusContextId": {
            "type": "integer",
            "description": "Player bonus incentive context ID",
            "format": "int32",
            "nullable": true
          },
          "groupInstanceId": {
            "type": "string",
            "description": "Multichoice bonus group instance id",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OnboardingRequest": {
        "required": [
          "countryCode",
          "cpf",
          "currencyCode",
          "email",
          "locale",
          "password",
          "portalId",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 1,
            "type": "string",
            "description": "Players username"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "Password, 8 characters minimum.\r\nIMPORTANT: client implementation is responsible for assuring password complexity."
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "Valid email address, 50 characters maximum."
          },
          "portalId": {
            "type": "integer",
            "description": "Portal ID in which the player will login.",
            "format": "int32"
          },
          "cpf": {
            "minLength": 1,
            "type": "string",
            "description": "CPF number"
          },
          "countryCode": {
            "minLength": 1,
            "type": "string",
            "description": "Country code in Alpha-2 ISO 3166-1 standard.\r\nSee `GetCountries` for list of supported countries."
          },
          "currencyCode": {
            "minLength": 1,
            "type": "string",
            "description": "Currency code in ISO 4217 standard."
          },
          "locale": {
            "minLength": 1,
            "type": "string",
            "description": "Locale.\r\nSee `GetLanguages` for list of supported locales."
          },
          "deviceFingerprint": {
            "type": "string",
            "description": "Fingerprint of the device.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OnboardingResponse": {
        "type": "object",
        "properties": {
          "onboardingFlowURL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OptInBonusAwardingData": {
        "type": "object",
        "properties": {
          "awardConditionFulfilment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AwardConditionFulfilmentData"
            },
            "nullable": true
          },
          "awardConditionFulfilmentOperator": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OptInToBonusRequest": {
        "required": [
          "playerBonusId"
        ],
        "type": "object",
        "properties": {
          "playerBonusId": {
            "type": "integer",
            "description": "Player Bonus Id",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OptedInEnum": {
        "enum": [
          "AllPromotions",
          "OptedInPromotions",
          "PossibleOptinOrOptinNotRequiredPromotions"
        ],
        "type": "string"
      },
      "PaymentAccount": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "description": "Account id.",
            "format": "int64"
          },
          "paymentInstrumentId": {
            "type": "integer",
            "description": "Payment instrument id: 22 – LocalBankTransfer(bank accounts)",
            "format": "int64"
          },
          "displayName": {
            "type": "string",
            "description": "Visual representation of the account.",
            "nullable": true
          },
          "lastUsedTime": {
            "type": "string",
            "description": "DateTime when it was last used, can be null.",
            "format": "date-time",
            "nullable": true
          },
          "agreement": {
            "type": "boolean",
            "nullable": true
          },
          "enabledForWithdrawal": {
            "type": "boolean",
            "description": "Flag if account is enabled for withdrawal."
          },
          "enabledForDeposit": {
            "type": "boolean",
            "description": "Flag if account is enabled for deposit."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Account properties such as TokenID, Name…",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Account"
      },
      "PaymentInstrumentData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of payment instrument.",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the payment instrument.",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "External ID",
            "nullable": true
          },
          "paymentInstrumentType": {
            "$ref": "#/components/schemas/PaymentInstrumentTypeEnum"
          },
          "isCreditCard": {
            "type": "boolean",
            "description": "Whether a credit card was used. Set to true if it’s a credit card.",
            "nullable": true
          },
          "supportsDeposit": {
            "type": "boolean",
            "description": "Supports performing deposits.",
            "nullable": true
          },
          "supportsWithdrawal": {
            "type": "boolean",
            "description": "Supports performing withdrawals.",
            "nullable": true
          },
          "paymentProviderId": {
            "type": "integer",
            "description": "ID of payment provider.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paymen instrument data."
      },
      "PaymentInstrumentTypeEnum": {
        "enum": [
          "Card",
          "BankTransfer",
          "Alternative",
          "Online",
          "Crypto"
        ],
        "type": "string",
        "description": "Payment instrument type.\r\nPossible values:\r\n* Card,\r\n* BankTransfer,\r\n* Alternative, \r\n* Online,\r\n* Crypto"
      },
      "PaymentInstrumentsDataResponse": {
        "type": "object",
        "properties": {
          "paymentInstruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentData"
            },
            "description": "List of all available payment instruments.",
            "nullable": true
          },
          "externalErrorCode": {
            "type": "string",
            "description": "External error code.",
            "nullable": true
          },
          "externalErrorMessage": {
            "type": "string",
            "description": "External error message.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment instruments data return"
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "description": "ID of the product.",
            "format": "int32",
            "nullable": true
          },
          "paymentInstrumentId": {
            "type": "integer",
            "description": "ID of payment instrument.",
            "format": "int32",
            "nullable": true
          },
          "paymentInstrumentType": {
            "$ref": "#/components/schemas/PaymentInstrumentTypeEnum"
          },
          "paymentAccountId": {
            "type": "integer",
            "description": "ID of payment account.",
            "format": "int64",
            "nullable": true
          },
          "paymentProviderId": {
            "type": "integer",
            "description": "Id of the payment provider.",
            "format": "int32",
            "nullable": true
          },
          "bonusCode": {
            "type": "string",
            "description": "Bonus code",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of transaction.",
            "format": "decimal",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency code as in ISO-4217 standard.",
            "nullable": true
          },
          "deviceFingerprint": {
            "type": "string",
            "description": "Fingerprint of the device – used for device management services, such as Iovation.",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional information about the deposit (depending on the payment instrument used).",
            "nullable": true
          },
          "testMode": {
            "type": "boolean",
            "description": "Send true for testing purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment request."
      },
      "PaymentTransactionTypeEnum": {
        "enum": [
          "Deposit",
          "Withdrawal",
          "ManualBalanceCorrection",
          "CashCorrection",
          "HighRollerCorrection",
          "PlayerToPlayer",
          "CICO",
          "CancelWithdrawal",
          "BalanceAdjustment",
          "Refund",
          "ChargeBack",
          "ReverseChargeback",
          "Return",
          "ReverseReturn",
          "Tip",
          "CreditWallet",
          "ExternalWalletCredit",
          "ExternalWalletDebit",
          "ExternalWalletDeposit",
          "ExternalWalletWithdrawal",
          "ExternalWalletWithdrawalCancel",
          "ExternalWalletTransferCredit",
          "ExternalWalletTransferDebit",
          "ExternalWalletTransferDebitCancel",
          "ExternalWalletManualBalanceCorrection",
          "ExternalWalletOfflineDeposit",
          "AgentCredit",
          "AgentDebit",
          "Fee",
          "VirtualSeamlessWalletCredit",
          "VirtualSeamlessWalletTransferCredit",
          "VirtualSeamlessWalletDebit",
          "VirtualSeamlessWalletTransferDebit",
          "Commission",
          "TokenBalanceConvertFiatToToken",
          "TokenBalanceConvertTokenToFiat",
          "CreditLinePlayerCredit",
          "CreditLinePlayerDebit"
        ],
        "type": "string",
        "description": "Transaction type.\r\nPossible  values:\r\n* Deposit,\r\n* Withdrawal,\r\n* ManualBalanceCorrection,\r\n* CashCorrection,\r\n* HighRollerCorrection,\r\n* PlayerToPlayer,\r\n* CICO,\r\n* CancelWithdrawal,\r\n* BalanceAdjustment,\r\n* Refund,\r\n* ChargeBack,\r\n* ReverseChargeback,\r\n* Return,\r\n* ReverseReturn,\r\n* Tip,\r\n* CreditWallet,\r\n* ExternalWalletCredit,\r\n* ExternalWalletDebit,\r\n* ExternalWalletDeposit,\r\n* ExternalWalletWithdrawal,\r\n* ExternalWalletWithdrawalCancel,\r\n* ExternalWalletTransferCredit,\r\n* ExternalWalletTransferDebit,\r\n* ExternalWalletTransferDebitCancel,\r\n* ExternalWalletManualBalanceCorrection,\r\n* ExternalWalletOfflineDeposit,\r\n* AgentCredit,\r\n* AgentDebit,\r\n* Fee,\r\n* VirtualSeamlessWalletCredit,\r\n* VirtualSeamlessWalletTransferCredit,\r\n* VirtualSeamlessWalletDebit,\r\n* VirtualSeamlessWalletTransferDebit,\r\n* Commission,\r\n* TokenBalanceConvertFiatToToken,\r\n* TokenBalanceConvertTokenToFiat,\r\n* CreditLinePlayerCredit,\r\n* CreditLinePlayerDebit"
      },
      "PlayerBonusHistory": {
        "type": "object",
        "properties": {
          "recordCount": {
            "type": "integer",
            "description": "Record count",
            "format": "int32",
            "nullable": true
          },
          "bonusId": {
            "type": "integer",
            "description": "Bonus id",
            "format": "int32",
            "nullable": true
          },
          "playerBonusId": {
            "type": "integer",
            "description": "Player bonus id",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PlayerBonusHistoryStatusEnum"
          },
          "totalWagered": {
            "type": "number",
            "description": "How much was wagered",
            "format": "decimal",
            "nullable": true
          },
          "bonusAwarded": {
            "type": "number",
            "description": "Bonus awarded amount",
            "format": "decimal",
            "nullable": true
          },
          "wageringRequirement": {
            "type": "number",
            "description": "Bonus wagering requirenment",
            "format": "decimal",
            "nullable": true
          },
          "wageringRequirementLeft": {
            "type": "number",
            "description": "Bonus wagering requirenment left",
            "format": "decimal",
            "nullable": true
          },
          "redeemedAmount": {
            "type": "number",
            "description": "How much was redeemed",
            "format": "decimal",
            "nullable": true
          },
          "acceptedDate": {
            "type": "string",
            "description": "Time when player accepted bonus",
            "format": "date-time",
            "nullable": true
          },
          "awardedDate": {
            "type": "string",
            "description": "Time when bonus was awarded",
            "format": "date-time",
            "nullable": true
          },
          "bonusName": {
            "type": "string",
            "description": "Bonus name",
            "nullable": true
          },
          "bonusFriendlyName": {
            "type": "string",
            "description": "Bonus friendly (display) name",
            "nullable": true
          },
          "termAndConditionsId": {
            "type": "integer",
            "description": "Term and conditions id",
            "format": "int32",
            "nullable": true
          },
          "bonusGroupId": {
            "type": "integer",
            "description": "ID of the multi-choice bonus group. A `null` value means that the bonus is not linked to multi-choice bonus.",
            "format": "int32",
            "nullable": true
          },
          "bonusMultiBonusChosen": {
            "type": "boolean",
            "description": "- `null`: no MCB bonuses are linked to a Promotion object\r\n- `true`: at least one multi-choice bonus was already selected by player within returned bonusGroupId\r\n- `false`: no multi-choice bonuses were selected by player within returned bonusGroupId",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Time when bonus expires",
            "format": "date-time",
            "nullable": true
          },
          "productTypeName": {
            "type": "string",
            "description": "Product type name",
            "nullable": true
          },
          "lockedAmount": {
            "type": "number",
            "description": "Locked amount",
            "format": "decimal",
            "nullable": true
          },
          "awardType": {
            "type": "integer",
            "description": "Award type id",
            "format": "int32",
            "nullable": true
          },
          "bonusType": {
            "type": "string",
            "description": "Name of bonus type",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "description": "Bonus category ID",
            "format": "int32",
            "nullable": true
          },
          "bonusDescription": {
            "type": "string",
            "description": "Bonus description",
            "nullable": true
          },
          "bonusFriendlyDescription": {
            "type": "string",
            "description": "Bonus friendly (display) description",
            "nullable": true
          },
          "redeemedDate": {
            "type": "string",
            "description": "Time when bonus was redeemed",
            "format": "date-time",
            "nullable": true
          },
          "lostDate": {
            "type": "string",
            "description": "Time when bonus was lost",
            "format": "date-time",
            "nullable": true
          },
          "declinedDate": {
            "type": "string",
            "description": "Time when bonus was declined",
            "format": "date-time",
            "nullable": true
          },
          "bonusScheduling": {
            "$ref": "#/components/schemas/BonusSchedulingData"
          },
          "bonusAwarding": {
            "$ref": "#/components/schemas/BonusAwardingData"
          },
          "totalNumWagered": {
            "type": "integer",
            "description": "Number of successful bets already made at the bonus wagering",
            "format": "int32",
            "nullable": true
          },
          "numWageredRequirement": {
            "type": "integer",
            "description": "Number of required bonus wagering bets",
            "format": "int32",
            "nullable": true
          },
          "numWageredRequirementLeft": {
            "type": "integer",
            "description": "Number of remaining bonus wagering bets",
            "format": "int32",
            "nullable": true
          },
          "wageringContributionMode": {
            "$ref": "#/components/schemas/WageringContributionModeEnum"
          },
          "wageringRequirementChunk": {
            "$ref": "#/components/schemas/WageringRequirementChunk"
          },
          "bonusItemsAwarded": {
            "type": "string",
            "nullable": true
          },
          "freeSpinType": {
            "type": "string",
            "nullable": true
          },
          "customContentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomContent"
            },
            "description": "Custom content for Promotion",
            "nullable": true
          },
          "bonusAmount": {
            "type": "number",
            "description": "Current bonus balance",
            "format": "decimal",
            "nullable": true
          },
          "totalWageredBonus": {
            "type": "number",
            "description": "How much bonus money was wagered",
            "format": "decimal",
            "nullable": true
          },
          "externalBonusProductSupplier": {
            "type": "string",
            "description": "Bonus product supplier name for external bonuses",
            "nullable": true
          },
          "externalBonusProduct": {
            "type": "string",
            "description": "Bonus product name if value is populated for external bonuses",
            "nullable": true
          },
          "promotionId": {
            "type": "integer",
            "description": "PromotionId for returned bonus",
            "format": "int32",
            "nullable": true
          },
          "bonusSettings": {
            "$ref": "#/components/schemas/BonusSettingsData"
          },
          "priority": {
            "type": "integer",
            "description": "Bonus priority",
            "format": "int32"
          },
          "optInBonus": {
            "type": "boolean",
            "description": "true:  player can opt-in to bonus directly\r\nfalse: player can not opt-in to bonus directly"
          },
          "bonusCustomContentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomContent"
            },
            "description": "Custom content for Bonus",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerBonusHistoryStatusEnum": {
        "enum": [
          "Declined",
          "Active",
          "Pending",
          "Expired",
          "Frozen",
          "Lost",
          "Redeemed",
          "Waiting",
          "WaitingManual",
          "AwardedExternal",
          "AwardWaiting",
          "FinancialApproval",
          "WaitingExternal",
          "UnsuccessfulExternalAwarding",
          "RedeemWaiting",
          "WaitingEligibility"
        ],
        "type": "string"
      },
      "PlayerBonusInfo": {
        "type": "object",
        "properties": {
          "bonusIncetiveId": {
            "type": "integer",
            "description": "Bonus incentive ID",
            "format": "int32",
            "nullable": true
          },
          "bonusIncetiveName": {
            "type": "string",
            "description": "Bonus incentive name",
            "nullable": true
          },
          "bonusIncetiveFriendlyName": {
            "type": "string",
            "description": "Bonus incentive friendly name",
            "nullable": true
          },
          "playerId": {
            "type": "integer",
            "description": "Player ID",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerContactInfo": {
        "type": "object",
        "properties": {
          "subTypeId": {
            "type": "integer",
            "description": "Sub-type ID.\r\nPossible values:\r\n* 1 – home, \r\n* 2 - mobile1, \r\n* 3 - mobile2, \r\n* 4 – work, \r\n* 5 - fax, \r\n* 6 - other",
            "format": "int32"
          },
          "typeId": {
            "type": "integer",
            "description": "Type ID.",
            "format": "int32"
          },
          "preferred": {
            "type": "boolean",
            "description": "If preferred."
          },
          "value": {
            "type": "string",
            "description": "Value.",
            "nullable": true
          },
          "verified": {
            "type": "boolean",
            "description": "If contact is verified."
          },
          "name": {
            "type": "string",
            "description": "Name of contact player.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Player contact info."
      },
      "PlayerDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Player ID to retrieve players' data and details.",
            "format": "int64",
            "nullable": true
          },
          "portalId": {
            "type": "integer",
            "description": "ID of  the application / portal. \r\nSee `GetPortals` for list of supported locales.",
            "format": "int32",
            "nullable": true
          },
          "activePlayer": {
            "type": "boolean",
            "description": "If player is active."
          },
          "secretQuestionId": {
            "type": "integer",
            "description": "Secret question, used for security purposes.\r\nSee method \"GET  /api/portal/v1/globalization/secret-questions\" for more details.",
            "format": "int32",
            "nullable": true
          },
          "securityQuestion": {
            "type": "integer",
            "description": "Security question.",
            "format": "int32",
            "nullable": true
          },
          "secretAnswer": {
            "type": "string",
            "description": "Secret answer, used for security purposes.",
            "nullable": true
          },
          "securityAnswer": {
            "type": "string",
            "description": "Security answer.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name of the player.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the player.",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the player.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in ISO format (YYYY-MM-DD).",
            "format": "date",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency code in ISO 4217 standard.\r\nSee `GetCurrencies` for list of supported currencies.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code in Alpha-2 ISO 3166-1 standard.\r\nSee `GetCountries` for list of supported countries.",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "city": {
            "type": "string",
            "description": "City.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code.",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "Street.",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "description": "House number.",
            "nullable": true
          },
          "eMail": {
            "type": "string",
            "description": "Player's email.",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "description": "Locale code(culture or language core) of the player \r\nSee `GetLanguages` for list of supported locales.",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "Username of the player",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true
          },
          "signupIp": {
            "type": "string",
            "description": "Signup IP address. Not publicly available.",
            "nullable": true
          },
          "title": {
            "type": "integer",
            "description": "Title used to address the player.\r\nSee `GetTitles` for more details.",
            "format": "int32",
            "nullable": true
          },
          "stateProvince": {
            "type": "string",
            "description": "State province.",
            "nullable": true
          },
          "hearAboutUs": {
            "type": "string",
            "description": "Hear about us.",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon code for bonuses.",
            "nullable": true
          },
          "receiveNews": {
            "type": "boolean",
            "description": "Flag indicating whether the player wants to receive marketing offers and bonuses.",
            "nullable": true
          },
          "geoLocCountryCode": {
            "type": "string",
            "description": "GeoLocation country code.",
            "nullable": true
          },
          "mobileClient": {
            "type": "boolean",
            "description": "If mobile client.",
            "nullable": true
          },
          "nickname": {
            "type": "string",
            "description": "Player nickname.",
            "nullable": true
          },
          "productTypeId": {
            "type": "string",
            "description": "Product type ID.",
            "nullable": true
          },
          "affiliateExternalId": {
            "type": "string",
            "description": "Affiliate external ID.",
            "nullable": true
          },
          "registrationDate": {
            "type": "string",
            "description": "Player registration date.",
            "format": "date-time"
          },
          "ignoreInternalAccountsWhiteListSetting": {
            "type": "boolean",
            "description": "Ignoring internal accounts whitelist settings"
          },
          "instantMessengerType": {
            "type": "integer",
            "description": "Type of instant messenger",
            "format": "int32"
          },
          "instantMessenger": {
            "type": "string",
            "description": "Instant messenger",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true
          },
          "contactInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerContactInfo"
            },
            "description": "List of contact info about the player.",
            "nullable": true
          },
          "customParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional custom parameters.",
            "nullable": true
          },
          "secretQuestionsAndAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretQuestionAndAnswer"
            },
            "description": "List of secret questions and answers.",
            "nullable": true
          },
          "useMFA": {
            "type": "boolean",
            "description": "Flag indicating whether multi-factor authentication should be enabled.",
            "nullable": true
          },
          "mfaChannel": {
            "type": "integer",
            "description": "Id of channel used for MFA.",
            "format": "int32",
            "nullable": true
          },
          "mfaLocked": {
            "type": "boolean",
            "description": "Flag indicating whether multi-factor authentication is locked.",
            "nullable": true
          },
          "internalAccount": {
            "type": "boolean",
            "description": "If internal account.",
            "nullable": true
          },
          "registrationPortalId": {
            "type": "integer",
            "description": "Registration portal ID.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "All player details."
      },
      "PlayerDetailsResponse": {
        "type": "object",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/PlayerDetails"
          }
        },
        "additionalProperties": false,
        "description": "Player details return."
      },
      "PlayerDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Document Id.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "File name with file extension.",
            "nullable": true
          },
          "approvalStatus": {
            "$ref": "#/components/schemas/ApprovalStatusEnum"
          },
          "creationTime": {
            "type": "string",
            "description": "UTC DateTime of uploaded document.",
            "format": "date-time"
          },
          "expirationTime": {
            "type": "string",
            "description": "Expiration DateTime of the uploaded document.",
            "format": "date-time",
            "nullable": true
          },
          "documentCategory": {
            "type": "integer",
            "description": "Category of the uploaded document.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Player Document."
      },
      "PlayerGameRequest": {
        "required": [
          "extGameId",
          "isNative",
          "language",
          "portalId",
          "realPlay"
        ],
        "type": "object",
        "properties": {
          "extGameId": {
            "minLength": 1,
            "type": "string",
            "description": "External game id to start game."
          },
          "portalId": {
            "type": "integer",
            "description": "ID of  the application / portal.",
            "format": "int32"
          },
          "realPlay": {
            "type": "boolean",
            "description": "Flag indicating whether the game is in real play. \r\nTrue (play for real), False (play for fun)."
          },
          "isNative": {
            "type": "boolean",
            "description": "Flag indicating whether game is launched in native."
          },
          "language": {
            "minLength": 1,
            "type": "string",
            "description": "Player's current (selected) language."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional launch parameters.",
            "nullable": true
          },
          "desiredCurrency": {
            "type": "string",
            "description": "Specify in which currency the game should be lunched",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Player game request."
      },
      "PlayerOptInBonus": {
        "type": "object",
        "properties": {
          "bonusId": {
            "type": "integer",
            "format": "int32"
          },
          "playerBonusId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "bonusName": {
            "type": "string",
            "nullable": true
          },
          "bonusFriendlyName": {
            "type": "string",
            "nullable": true
          },
          "termAndConditionsId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bonusMultiBonusChosen": {
            "type": "boolean",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "productTypeName": {
            "type": "string",
            "nullable": true
          },
          "bonusType": {
            "type": "string",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bonusDescription": {
            "type": "string",
            "nullable": true
          },
          "bonusFriendlyDescription": {
            "type": "string",
            "nullable": true
          },
          "bonusScheduling": {
            "$ref": "#/components/schemas/BonusOptInSchedulingData"
          },
          "bonusAwarding": {
            "$ref": "#/components/schemas/OptInBonusAwardingData"
          },
          "bonusAmount": {
            "type": "number",
            "format": "decimal"
          },
          "externalBonusProductSupplier": {
            "type": "string",
            "nullable": true
          },
          "externalBonusProduct": {
            "type": "string",
            "nullable": true
          },
          "bonusCustomContentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomContent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerOptInCodeWithPlayerPromotionsRequest": {
        "required": [
          "optInCode"
        ],
        "type": "object",
        "properties": {
          "optInCode": {
            "minLength": 1,
            "type": "string",
            "description": "Opt-in code"
          },
          "promotionId": {
            "type": "integer",
            "description": "Promotion ID",
            "format": "int32",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "description": "Language code",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "description": "Brand ID",
            "format": "int32",
            "nullable": true
          },
          "includeCustomContent": {
            "type": "boolean",
            "description": "Flag indicating whether to include custom content. Default = false.",
            "nullable": true
          },
          "optedIn": {
            "$ref": "#/components/schemas/OptedInEnum"
          },
          "multiChoiceBonus": {
            "type": "boolean",
            "description": "Possible options:\r\nFalse or not provided: all promotions\r\nTrue: promotions that are linked to Multi choice bonus configuration",
            "nullable": true
          },
          "eligibilityCheckForPromotionBonusesOnly": {
            "type": "boolean",
            "description": "Flag to check eligibility only for bonuses linked to specific promotion instead for all bonuses. Default value is false."
          },
          "includeHistory": {
            "type": "boolean",
            "description": "Flag to also include player bonuses from history table (player bonuses in final state and older than 2 weeks). Default value is true (configurable - BonusMgmt.GetPlayerBonuses.DefaultIncludeHistory).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerRewardStatusEnum": {
        "enum": [
          "Claimed",
          "Processing",
          "Delivered",
          "Cancelled"
        ],
        "type": "string"
      },
      "PlayerShortcutGameMain": {
        "type": "object",
        "properties": {
          "gameExternalId": {
            "type": "string",
            "description": "Extenral game id",
            "nullable": true
          },
          "playerId": {
            "type": "integer",
            "description": "Player id",
            "format": "int64",
            "nullable": true
          },
          "marketDate": {
            "type": "string",
            "description": "Date when the shortcut was created.",
            "format": "date-time",
            "nullable": true
          },
          "gameName": {
            "type": "string",
            "description": "Internal game name",
            "nullable": true
          },
          "gameType": {
            "type": "string",
            "description": "Game Type",
            "nullable": true
          },
          "product": {
            "type": "string",
            "description": "Product name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Record of Player Shortcut Game"
      },
      "PlayerShortcutGameMainsResponse": {
        "type": "object",
        "properties": {
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerShortcutGameMain"
            },
            "description": "List of Player Shortcut Games",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlayerTokenTypeEnum": {
        "enum": [
          "ForgotPasswordToken",
          "PlayerActivationToken",
          "IncompleteRegistrationToken",
          "ChangeUserNameToken",
          "UpdateMarketingToken",
          "ReferAFriendEmailToken",
          "SMSVerificationToken",
          "ReferAFriendSMSToken",
          "OTPToken",
          "EmailVerificationToken",
          "MultiFactorAuthenticationToken",
          "SingleSignOnToken",
          "PlayerSessionRenewalToken",
          "OTPWithdrawal"
        ],
        "type": "string",
        "description": "Types of player tokens.\r\n\r\nPossible  values:\r\n* ForgotPasswordToken,\r\n* PlayerActivationToken,\r\n* IncompleteRegistrationToken,\r\n* ChangeUserNameToken,\r\n* UpdateMarketingToken,\r\n* ReferAFriendEmailToken\r\n* SMSVerificationToken\r\n* ReferAFriendSMSToken\r\n* OTPToken\r\n* EmailVerificationToken\r\n* MultiFactorAuthenticationToken\r\n* SingleSignOnToken\r\n* PlayerSessionRenewalToken\r\n* OTPWithdrawal"
      },
      "PlayerValidateData": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Represents the field for which the value is being validated\r\n* Username\r\n* BonusPromoCode,\r\n* Email,\r\n* BannedWords"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "Value to be validated for key"
          }
        },
        "additionalProperties": false,
        "description": "Player validate data"
      },
      "PlayerValidateDataResult": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Returns the field for which the value is being validated",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of players validated data\r\nStatus:\r\n* Success,\r\n* CouponNotFound,\r\n* PrincipalExist,\r\n* EmailExists,\r\n* ContainsBannedWord",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Player validate data result"
      },
      "PopupAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Popup action id",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Popup action name",
            "nullable": true
          },
          "actionType": {
            "type": "integer",
            "description": "Action type",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Popup action"
      },
      "PopupStateEnum": {
        "enum": [
          "Pending",
          "Read",
          "Unread",
          "Expired",
          "Inactive",
          "OneTime",
          "Deleted"
        ],
        "type": "string",
        "description": "Message popup state\r\nPossible  values:\r\n* Pending,\r\n* Read,\r\n* Unread,\r\n* Expired,\r\n* Inactive,\r\n* OneTime,\r\n* Deleted"
      },
      "PortalAvailability": {
        "type": "object",
        "properties": {
          "portalId": {
            "type": "integer",
            "description": "Portal Id",
            "format": "int32"
          },
          "isCountryRestricted": {
            "type": "boolean",
            "description": "If true, the country is restricted"
          },
          "isCurrencyRestricted": {
            "type": "boolean",
            "description": "If true, the currency is restricted"
          },
          "avbl": {
            "$ref": "#/components/schemas/AvailabilityFlags"
          }
        },
        "additionalProperties": false,
        "description": "Portal availability"
      },
      "PortalGatewayErrorResponse": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortalGatewayValidationFailedResponse": {
        "type": "object",
        "properties": {
          "validationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostGameResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Game ID.",
            "format": "int32",
            "nullable": true
          },
          "gameExternalId": {
            "type": "string",
            "description": "Game external ID.",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "Game server base URL.",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional launch parameters.",
            "nullable": true
          },
          "webMethod": {
            "type": "string",
            "description": "Method for launching.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Post game response."
      },
      "ProductAvailability": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "description": "Product id",
            "format": "int32"
          },
          "productName": {
            "type": "string",
            "description": "Product name",
            "nullable": true
          },
          "isCountryRestricted": {
            "type": "boolean",
            "description": "Country restriction, if true, the product cannot be used in the specific country"
          },
          "isCurrencyRestricted": {
            "type": "boolean",
            "description": "Currency restriction, if true, the product cannot be used with the specific currency"
          },
          "avbl": {
            "$ref": "#/components/schemas/AvailabilityFlags"
          }
        },
        "additionalProperties": false,
        "description": "Product availability"
      },
      "ProductSupplierAvailability": {
        "type": "object",
        "properties": {
          "productSupplierId": {
            "type": "integer",
            "description": "Product supplier ID",
            "format": "int32"
          },
          "productSupplierName": {
            "type": "string",
            "description": "Product supplier name",
            "nullable": true
          },
          "avbl": {
            "$ref": "#/components/schemas/AvailabilityFlags"
          }
        },
        "additionalProperties": false,
        "description": "Product supplier availability"
      },
      "ProductTypeParam": {
        "type": "object",
        "properties": {
          "productTypeId": {
            "type": "integer",
            "description": "ID of product type.",
            "format": "int32"
          },
          "recievePromoEmail": {
            "type": "boolean",
            "description": "If promotion mail was received."
          }
        },
        "additionalProperties": false,
        "description": "In case this property is set, then populating it's fields is mandatory."
      },
      "ProductTypeParamExtended": {
        "type": "object",
        "properties": {
          "productTypeId": {
            "type": "integer",
            "description": "ID of product type.",
            "format": "int32"
          },
          "recievePromoEmail": {
            "type": "boolean",
            "description": "If promotion mail was received."
          },
          "productTypeName": {
            "type": "string",
            "description": "Product type name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product type parameters extended."
      },
      "PromotionData": {
        "type": "object",
        "properties": {
          "promotionId": {
            "type": "integer",
            "description": "Promotion ID",
            "format": "int32"
          },
          "promotionContents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentData"
            },
            "description": "List of promotion contents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Promotion data"
      },
      "PromotionDetails": {
        "type": "object",
        "properties": {
          "promotionId": {
            "type": "integer",
            "description": "Promotion ID",
            "format": "int32",
            "nullable": true
          },
          "promotionActivationDate": {
            "type": "string",
            "description": "Promotion activation date (old existing promotions have none)",
            "format": "date-time",
            "nullable": true
          },
          "promotionFriendlyName": {
            "type": "string",
            "description": "Promotion friendly (display) name",
            "nullable": true
          },
          "promotionName": {
            "type": "string",
            "description": "Promotion (display) name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Promotion descriptiom",
            "nullable": true
          },
          "optInCode": {
            "type": "string",
            "description": "Promotion opt-in code",
            "nullable": true
          },
          "promotionType": {
            "$ref": "#/components/schemas/PromotionTypeDtoEnum"
          },
          "priority": {
            "type": "integer",
            "description": "Priority (1..999)",
            "format": "int32",
            "nullable": true
          },
          "recommended": {
            "type": "boolean",
            "description": "Flag indicating if promotion is recommended",
            "nullable": true
          },
          "recommendedPriority": {
            "type": "integer",
            "description": "Recommended priority (1..999)",
            "format": "int32",
            "nullable": true
          },
          "iCoreAggregatedBonusStatus": {
            "$ref": "#/components/schemas/ICoreAggregatedBonusStatusDtoEnum"
          },
          "promotionStatus": {
            "$ref": "#/components/schemas/PromotionStatusEnum"
          },
          "bonusCategory": {
            "type": "integer",
            "description": "Bonus category",
            "format": "int32",
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "description": "Product type ID of a bonus",
            "format": "int32",
            "nullable": true
          },
          "bonusExpirationDate": {
            "type": "string",
            "description": "Bonus expiration date",
            "format": "date-time",
            "nullable": true
          },
          "couponEventId": {
            "type": "integer",
            "description": "Coupon event ID (needed for opt-out)",
            "format": "int64",
            "nullable": true
          },
          "couponEventTime": {
            "type": "string",
            "description": "Coupon event time",
            "format": "date-time",
            "nullable": true
          },
          "bonusScheduling": {
            "$ref": "#/components/schemas/BonusSchedulingData"
          },
          "customContentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomContent"
            },
            "description": "Custom content for this promotion",
            "nullable": true
          },
          "bonusName": {
            "type": "string",
            "description": "Bonus name",
            "nullable": true
          },
          "promotionEndDate": {
            "type": "string",
            "description": "Promotion end date after which the opt-in is disabled",
            "format": "date-time"
          },
          "receiveExclusiveOffersAndBonuses": {
            "type": "boolean",
            "description": "Whether player has GDPR agreement or not",
            "nullable": true
          },
          "bonusSeeker": {
            "type": "boolean",
            "description": "Whether player is bonus abuser or not",
            "nullable": true
          },
          "receiveBonus": {
            "type": "boolean",
            "description": "Whether player is allowed to receive new bonuses or not",
            "nullable": true
          },
          "bonusType": {
            "type": "string",
            "description": "Name of the bonus type",
            "nullable": true
          },
          "bonusAwarded": {
            "type": "number",
            "description": "Bonus awarded amount",
            "format": "decimal",
            "nullable": true
          },
          "bonusGroupId": {
            "type": "integer",
            "description": "ID of the multi-choice bonus group. A `null` value means that the bonus is not linked to multi-choice bonus.",
            "format": "int32",
            "nullable": true
          },
          "bonusMultiBonusChosen": {
            "type": "boolean",
            "description": "- `null`: no MCB bonuses are linked to a Promotion object\r\n- `true`: at least one multi-choice bonus was already selected by player within returned bonusGroupId\r\n- `false`: no multi-choice bonuses were selected by player within returned bonusGroupId",
            "nullable": true
          },
          "bonusFriendlyName": {
            "type": "string",
            "description": "Bonus friendly name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PromotionStatusEnum": {
        "enum": [
          "NotYetOptedin",
          "OptedIn",
          "OptedOut",
          "NoOptinRequired"
        ],
        "type": "string"
      },
      "PromotionTypeDtoEnum": {
        "enum": [
          "WithBonus",
          "Custom"
        ],
        "type": "string"
      },
      "PromotionsCouponCodeRequest": {
        "required": [
          "couponCode"
        ],
        "type": "object",
        "properties": {
          "couponCode": {
            "minLength": 1,
            "type": "string",
            "description": "Coupon code"
          }
        },
        "additionalProperties": false
      },
      "PromotionsOptInRequest": {
        "required": [
          "optInCode"
        ],
        "type": "object",
        "properties": {
          "optInCode": {
            "minLength": 1,
            "type": "string",
            "description": "Opt-in code"
          },
          "promotionId": {
            "type": "integer",
            "description": "Promotion ID",
            "format": "int32",
            "nullable": true
          },
          "eligibilityCheckForPromotionBonusesOnly": {
            "type": "boolean",
            "description": "Flag to check eligibility only for bonuses linked to specific promotion instead for all bonuses. Default value is false."
          }
        },
        "additionalProperties": false
      },
      "PromotionsOptOutRequest": {
        "required": [
          "couponEventId",
          "declineAllRelatedBonuses",
          "promotionId"
        ],
        "type": "object",
        "properties": {
          "couponEventId": {
            "type": "integer",
            "description": "Coupon event ID",
            "format": "int64"
          },
          "promotionId": {
            "type": "integer",
            "description": "Promotion ID",
            "format": "int32"
          },
          "declineAllRelatedBonuses": {
            "type": "boolean",
            "description": "Flag indicating whether to decline all related bonuses"
          }
        },
        "additionalProperties": false
      },
      "ReVerificationRequest": {
        "type": "object",
        "properties": {
          "cpf": {
            "type": "string",
            "description": "CPF number",
            "nullable": true
          },
          "portalId": {
            "type": "integer",
            "description": "Portal id",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReVerificationResponse": {
        "type": "object",
        "properties": {
          "reVerificationURL": {
            "type": "string",
            "description": "Reverification url, which needs to be opened",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "description": "Reverification request id",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RedeemLoyaltyPointsRequest": {
        "required": [
          "numberOfPoints"
        ],
        "type": "object",
        "properties": {
          "numberOfPoints": {
            "type": "number",
            "description": "Number of points.",
            "format": "decimal"
          }
        },
        "additionalProperties": false,
        "description": "Create redeem loyalty points request."
      },
      "RedeemedPointsTransactionsResponse": {
        "type": "object",
        "properties": {
          "loyaltyTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltyTransaction"
            },
            "description": "List of redeemed marketing points transactions.",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Number of returned records.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Create redeemed points transactions return."
      },
      "ReferAFriend": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the referee.",
            "nullable": true
          },
          "refereeContact": {
            "type": "string",
            "description": "Contact of the referee.",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Refer a friend data."
      },
      "ReferAFriendRequest": {
        "type": "object",
        "properties": {
          "requestType": {
            "$ref": "#/components/schemas/RequestTypeEnum"
          },
          "language": {
            "type": "string",
            "description": "Language of the request.",
            "nullable": true
          },
          "registrationLink": {
            "type": "string",
            "description": "Registration link.",
            "nullable": true
          },
          "homeLink": {
            "type": "string",
            "description": "Web home link.",
            "nullable": true
          },
          "referees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefereeContactInformation"
            },
            "description": "A list of referees contact information and names, to be referred.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Refer a friend request data."
      },
      "ReferAFriendResponse": {
        "type": "object",
        "properties": {
          "rafRequestValid": {
            "type": "boolean",
            "description": "Refer a friend request valid boolean, true if valid, false if invalid."
          },
          "referAFriend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferAFriend"
            },
            "description": "A list of referees that were referred.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Refer a friend response."
      },
      "ReferAFriendStatisticsResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of invited friends.",
            "format": "int32"
          },
          "successful": {
            "type": "integer",
            "description": "The total number of invited friends who have registered and also deposited the necessary amount.",
            "format": "int32"
          },
          "currentRegistered": {
            "type": "integer",
            "description": "The total number of registered friends who haven't (yet) deposited the necessary amount.",
            "format": "int32"
          },
          "totalReferalBonuses": {
            "type": "integer",
            "description": "The total number of bonuses issued on the base of referrals.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Refer a Friend statistics return."
      },
      "RefereeContactInformation": {
        "type": "object",
        "properties": {
          "contact": {
            "type": "string",
            "description": "Referee contact",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Referee name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Referee's contact information"
      },
      "RequestTypeEnum": {
        "enum": [
          "Email",
          "SMS"
        ],
        "type": "string",
        "description": "Refer a friend request type"
      },
      "RewardData": {
        "type": "object",
        "properties": {
          "rewardId": {
            "type": "integer",
            "description": "Id of the reward",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the reward",
            "nullable": true
          },
          "requiredPoints": {
            "type": "number",
            "description": "Required amount of points to claim the reward",
            "format": "decimal"
          },
          "description": {
            "type": "string",
            "description": "Description of the reward",
            "nullable": true
          },
          "rewardType": {
            "$ref": "#/components/schemas/RewardTypeEnum"
          },
          "rewardStatus": {
            "$ref": "#/components/schemas/RewardStatusEnum"
          },
          "recommended": {
            "type": "boolean",
            "description": "Recommended flag"
          },
          "new": {
            "type": "boolean",
            "description": "New flag"
          },
          "startDate": {
            "type": "string",
            "description": "Date since when the reward is available. If null then there is no limit since when it is available.",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Date until when the reward is available. If null then there is no limit until when it is available.",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Date when the reward was created",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardTag"
            },
            "description": "Reward tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RewardStatusEnum": {
        "enum": [
          "Active",
          "Inactive",
          "ComingSoon"
        ],
        "type": "string"
      },
      "RewardTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RewardTypeEnum": {
        "enum": [
          "Item",
          "Bonus"
        ],
        "type": "string"
      },
      "SecretQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the secret question",
            "format": "int32"
          },
          "question": {
            "type": "string",
            "description": "Secret question",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecretQuestionAndAnswer": {
        "type": "object",
        "properties": {
          "secretQuestionId": {
            "type": "integer",
            "description": "Secret question, used for security purposes.\r\nSee method \"GET  /api/portal/v1/globalization/secret-questions\" for more details.",
            "format": "int32"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Secret answer, used for security purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Secret question and answer."
      },
      "SendActivationEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Player's email",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "description": "Brand id",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPlayerLimit": {
        "required": [
          "limitType"
        ],
        "type": "object",
        "properties": {
          "limitType": {
            "$ref": "#/components/schemas/LimitTypeEnum"
          },
          "time": {
            "$ref": "#/components/schemas/TimeTypeEnum"
          },
          "amountValue": {
            "type": "number",
            "description": "Amount of the limit, unit is defined by LimitType",
            "format": "decimal",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Reason for the limit",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A player's limit, regarding single bet, game session duration, total wager and lost.\r\n\r\nEach of the LimitType can have two two entries in the return list(one active, and one pending)"
      },
      "SetPlayerLimitRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "$ref": "#/components/schemas/SetPlayerLimit"
          }
        },
        "additionalProperties": false
      },
      "TemplateData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "contentType": {
            "$ref": "#/components/schemas/ContentTypeEnum"
          },
          "brandId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "htmlDefinition": {
            "type": "string",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeOutPlayerRequest": {
        "required": [
          "excludedUntil"
        ],
        "type": "object",
        "properties": {
          "excludedUntil": {
            "type": "string",
            "description": "Time/date until when player is timed out",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Time out player request"
      },
      "TimePeriodTypeEnum": {
        "enum": [
          "Once",
          "Day",
          "Week",
          "Month",
          "HalfMonth"
        ],
        "type": "string"
      },
      "TimeTypeEnum": {
        "enum": [
          "Hour",
          "Day",
          "Week",
          "Month",
          "GameSession"
        ],
        "type": "string",
        "description": "This parameter is requred if LimitType is set to Deposit.\r\nPossible time types:\r\n* Hours,\r\n* Day,\r\n* Week,\r\n* Month,\r\n* GameSession,"
      },
      "Title": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Title id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Title name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of a title",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Title"
      },
      "TopRecentGame": {
        "type": "object",
        "properties": {
          "gameExternalId": {
            "type": "string",
            "description": "Extenral game id",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrackingData": {
        "type": "object",
        "properties": {
          "marketingChannel": {
            "type": "string",
            "description": "Marketing channel",
            "nullable": true
          },
          "marketingSource": {
            "type": "string",
            "description": "Marketing source",
            "nullable": true
          },
          "campaignName": {
            "type": "string",
            "description": "Campaign name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrackingSource": {
        "type": "object",
        "properties": {
          "marketingChannel": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Marketing channel.",
            "nullable": true
          },
          "marketingSource": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Marketing source.",
            "nullable": true
          },
          "campaignName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Campaign name.",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon code.\r\nNOTICE: this will override the `CouponCode` set in the `Player` object.",
            "nullable": true
          },
          "creative": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Creative.",
            "nullable": true
          },
          "content": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Content.",
            "nullable": true
          },
          "btag": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "BTag.",
            "nullable": true
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional custom parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Tracking source data."
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction id",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "Status of transaction",
            "format": "int32"
          },
          "createTime": {
            "type": "string",
            "description": "Transaction creation time.",
            "format": "date-time"
          },
          "type": {
            "type": "integer",
            "description": "Type of transaction",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "description": "Amount transacted",
            "format": "decimal"
          },
          "referenceObject": {
            "type": "string",
            "description": "Transaction reference from Payment",
            "nullable": true
          },
          "additionalDescription": {
            "type": "string",
            "description": "Multipurpose description field that can be used by operator to store different kind of information about transaction",
            "nullable": true
          },
          "balanceAfter": {
            "type": "number",
            "description": "Balance after the transaction was performed",
            "format": "decimal"
          },
          "providerName": {
            "type": "string",
            "description": "Payment provider name",
            "nullable": true
          },
          "isCancellable": {
            "type": "boolean",
            "description": "Flag that indicates if the transaction is cancellable"
          },
          "productId": {
            "type": "integer",
            "description": "Id of the sending product",
            "format": "int32",
            "nullable": true
          },
          "paymentInstrumentName": {
            "type": "string",
            "description": "Payment instrument name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionDetailsInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Transaction id",
            "format": "int64"
          },
          "transactionTypeName": {
            "type": "string",
            "description": "Transaction type",
            "nullable": true
          },
          "createTime": {
            "type": "string",
            "description": "Transaction created time",
            "format": "date-time"
          },
          "referenceObject": {
            "type": "string",
            "description": "Reference object",
            "nullable": true
          },
          "transactionStepId": {
            "type": "integer",
            "description": "Transaction step id",
            "format": "int64"
          },
          "transactionStepTypeName": {
            "type": "string",
            "description": "Transaction step type",
            "nullable": true
          },
          "creditTypeName": {
            "type": "string",
            "description": "Credit type name",
            "nullable": true
          },
          "stepTime": {
            "type": "string",
            "description": "Step time",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount",
            "format": "decimal"
          },
          "amountAfter": {
            "type": "number",
            "description": "Transaction amount after",
            "format": "decimal",
            "nullable": true
          },
          "amountBefore": {
            "type": "number",
            "description": "Transaction amount before",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Transaction details"
      },
      "TransactionDetailsRequest": {
        "type": "object",
        "properties": {
          "referenceObject": {
            "type": "string",
            "description": "Transaction reference",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Transaction details request"
      },
      "TransactionDetailsResponse": {
        "type": "object",
        "properties": {
          "transactionDetailsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailsInfo"
            },
            "description": "List of transactions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Transaction details response"
      },
      "UpdatePlayer": {
        "required": [
          "countryCode",
          "eMail",
          "firstName",
          "lastName",
          "locale"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "City, 50 characters maximum.",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "Country code in Alpha-2 ISO 3166-1 standard.\r\nSee `GetCountries` for list of supported countries."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in ISO format (YYYY-MM-DD).",
            "format": "date-time"
          },
          "eMail": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Valid email address, 50 characters maximum.",
            "format": "email"
          },
          "firstName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "First name, 2 characters minimum, 50 characters maximum."
          },
          "gender": {
            "type": "string",
            "description": "Gender.",
            "nullable": true
          },
          "houseNumber": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "House number, optional. 30 characters maximum.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Player ID.",
            "format": "int64"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "Last name, 2 characters minimum, 50 characters maximum."
          },
          "locale": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "List of supported languages."
          },
          "middleName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Middle name, optional. 50 characters maximum.",
            "nullable": true
          },
          "mobilePhone": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true
          },
          "nickname": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Nickname, 50 characters maximum (numbers, letters, `-`, and `_`).",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "pokerViplevel": {
            "type": "string",
            "description": "Vip level in poker.",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Post code, optional. 50 characters maximum.",
            "nullable": true
          },
          "stateProvince": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "State province, optional. 50 characters maximum.",
            "nullable": true
          },
          "street": {
            "maxLength": 130,
            "minLength": 0,
            "type": "string",
            "description": "Street name, optional. 130 characters maximum.",
            "nullable": true
          },
          "securityAnswer": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Secret answer, used for security purposes.\r\nPossible values:\r\n*\tMother’s Maiden Name\r\n* Father’s First Name\r\n* Name of your First Car\r\n* Name of your First Pet \r\n* Name of your First School",
            "nullable": true
          },
          "securityQuestion": {
            "maxLength": 255,
            "minLength": 0,
            "type": "integer",
            "description": "Secret question, used for security purposes.",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "type": "integer",
            "description": "Title used to address the player.\r\nPossible values: \r\n* Mr,\r\n* Mrs, \r\n* Miss,\r\n* Ms, \r\n* Dr, \r\n* Sir, \r\n* Other",
            "format": "int32",
            "nullable": true
          },
          "secretQuestionsAndAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretQuestionAndAnswer"
            },
            "description": "List of the secret questions and answers.",
            "nullable": true
          },
          "useMFA": {
            "type": "boolean",
            "description": "Flag indicating whether multi-factor authentication should be enabled.",
            "nullable": true
          },
          "mfaChannel": {
            "type": "integer",
            "description": "Id of channel used for MFA.",
            "format": "int32",
            "nullable": true
          },
          "customParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional custom parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Update player."
      },
      "UpdatePlayerContactPrefRequest": {
        "type": "object",
        "properties": {
          "receiveEmailFromOperator": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive emails from operator",
            "nullable": true
          },
          "receiveSMSFromOperator": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive SMS from operator",
            "nullable": true
          },
          "receiveExclusiveOffersAndBonuses": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive exclusive offers and bonuses",
            "nullable": true
          },
          "receiveEmailFromThirdParty": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive email from third party",
            "nullable": true
          },
          "receiveSMSFromThirdParty": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive SMS from third party",
            "nullable": true
          },
          "blockAll": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to block all",
            "nullable": true
          },
          "doNotCall": {
            "type": "boolean",
            "description": "lag indicating whether player would like to receive calls",
            "nullable": true
          },
          "optinProfiling": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to opt-in for profiling",
            "nullable": true
          },
          "receiveLandBasedRetailInfo": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive land based retail info",
            "nullable": true
          },
          "receiveLoginNotification": {
            "type": "boolean",
            "description": "Flag indicating whether player would like to receive login notification",
            "nullable": true
          },
          "contactPrefChannels": {
            "$ref": "#/components/schemas/ContactPrefChannels"
          },
          "productTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTypeParam"
            },
            "description": "Product types parameters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Update player contact preferences request"
      },
      "UpdatePlayerCustomParamRequest": {
        "required": [
          "customParameters"
        ],
        "type": "object",
        "properties": {
          "customParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of custom parameters that player created."
          }
        },
        "additionalProperties": false,
        "description": "Update palyer custom parameters request"
      },
      "UpdatePlayerPaymentAccountRequest": {
        "type": "object",
        "properties": {
          "paymentInstrumentType": {
            "$ref": "#/components/schemas/PaymentInstrumentTypeEnum"
          },
          "paymentInstrumentId": {
            "type": "integer",
            "description": "ID of payment instrument.",
            "format": "int32",
            "nullable": true
          },
          "paymentProviderId": {
            "type": "integer",
            "description": "Payment provider id",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Payment account data to be updated, entires depend on the payment instrument.",
            "nullable": true
          },
          "testMode": {
            "type": "boolean",
            "description": "Send true for testing purposes."
          }
        },
        "additionalProperties": false,
        "description": "Update player payment account."
      },
      "UpdatePlayerRequest": {
        "required": [
          "player"
        ],
        "type": "object",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/UpdatePlayer"
          }
        },
        "additionalProperties": false,
        "description": "Update player request."
      },
      "ValidatePlayerDataRequest": {
        "required": [
          "playerDataList",
          "portalId"
        ],
        "type": "object",
        "properties": {
          "portalId": {
            "type": "integer",
            "description": "Portal id",
            "format": "int32"
          },
          "playerDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerValidateData"
            },
            "description": "List of players data"
          }
        },
        "additionalProperties": false,
        "description": "Validate player data request"
      },
      "ValueTypeEnum": {
        "enum": [
          "Value",
          "Media"
        ],
        "type": "string",
        "description": "Content type enumeration"
      },
      "WagerTypeEnum": {
        "enum": [
          "PreWager",
          "AfterWager"
        ],
        "type": "string"
      },
      "WageringContributionModeEnum": {
        "enum": [
          "Wagering",
          "Chunks",
          "WagerCount",
          "WageringAndWagerCount",
          "WageringOrWagerCount"
        ],
        "type": "string"
      },
      "WageringRequirementChunk": {
        "type": "object",
        "properties": {
          "chunkType": {
            "$ref": "#/components/schemas/WageringRequirementChunkTypeEnum"
          },
          "chunkSize": {
            "type": "number",
            "description": "Number of points needed to redeem a chunk.",
            "format": "decimal",
            "nullable": true
          },
          "currentChunkFulfilment": {
            "type": "number",
            "description": "Current number of points gathered (for next chunk redemption).",
            "format": "decimal",
            "nullable": true
          },
          "chunkRedeemAmount": {
            "type": "number",
            "description": "Amount to be redeemed to player’s real cash once the chunk requirements are fullfiled.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WageringRequirementChunkTypeEnum": {
        "enum": [
          "Wager",
          "BonusPoints"
        ],
        "type": "string"
      },
      "WithdrawalEligibilityParametersResponse": {
        "type": "object",
        "properties": {
          "kycStatusPassed": {
            "type": "boolean",
            "description": "Is KYC passed."
          },
          "eligibleForBankTransferWithdrawal": {
            "type": "boolean",
            "description": "Bank transfer eligibility for withdrawal."
          },
          "eligibleForCicoWithdrawal": {
            "type": "boolean",
            "description": "CICO transfer eligibility."
          },
          "eligibleForOnlineWithdrawal": {
            "type": "boolean",
            "description": "Online transfer eligibility for withdrawal."
          },
          "willAnyBonusExpireOnWithdrawal": {
            "type": "boolean",
            "description": "Bonus expiration trigger for withdrawal."
          },
          "withdrawalFees": {
            "$ref": "#/components/schemas/WithdrawalFee"
          }
        },
        "additionalProperties": false,
        "description": "Withdrawal eligibility parameters return"
      },
      "WithdrawalFaceAuthProcessRequest": {
        "required": [
          "cafId"
        ],
        "type": "object",
        "properties": {
          "cafId": {
            "minLength": 1,
            "type": "string",
            "description": "Caf Id"
          }
        },
        "additionalProperties": false
      },
      "WithdrawalFaceAuthProcessResponse": {
        "type": "object",
        "properties": {
          "redirectURL": {
            "type": "string",
            "description": "URL to redirect the player to in case of additional external authorization.",
            "nullable": true
          },
          "webMethod": {
            "type": "string",
            "description": "Method for launching.",
            "nullable": true
          },
          "confirmRequired": {
            "type": "boolean",
            "description": "If the request has been confirmed (true/false).",
            "nullable": true
          },
          "declineReason": {
            "type": "string",
            "description": "Reason why the payment was declined.",
            "nullable": true
          },
          "declineReasonCode": {
            "type": "string",
            "description": "Reason code why the payment was declined.",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional information about the deposit (depending on the payment instrument used).",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Id of the created transaction",
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "description": "Status of the created payment.",
            "nullable": true
          },
          "externalErrorCode": {
            "type": "string",
            "description": "External error code.",
            "nullable": true
          },
          "externalErrorMessage": {
            "type": "string",
            "description": "External error message.",
            "nullable": true
          },
          "withdrawalFacialAuthProcessStatus": {
            "$ref": "#/components/schemas/WithdrawalFaceAuthProcessStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "WithdrawalFaceAuthProcessStatusEnum": {
        "enum": [
          "Processing",
          "Rejected",
          "Approved",
          "Unknown"
        ],
        "type": "string"
      },
      "WithdrawalFee": {
        "type": "object",
        "properties": {
          "withdrawalFeeEnabled": {
            "type": "boolean",
            "description": "Withdrawal fee enabled flag.",
            "nullable": true
          },
          "freeWithdrawalFeesInPeriod": {
            "type": "integer",
            "description": "Free withdrawal fees in period amount.",
            "format": "int32"
          },
          "withdrawalFeeStartPeriod": {
            "type": "string",
            "description": "Withdrawal fee start period.",
            "format": "date-time",
            "nullable": true
          },
          "withdrawalFeeEndPeriod": {
            "type": "string",
            "description": "Withdrawal fee end period.",
            "format": "date-time",
            "nullable": true
          },
          "withdrawalsFeesCount": {
            "type": "integer",
            "description": "Withdrawals fees count.",
            "format": "int32",
            "nullable": true
          },
          "withdrawalFeesSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WithdrawalFeeConfiguration"
            },
            "description": "List of withdrawal fees settings.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Withdrawal fee"
      },
      "WithdrawalFeeConfiguration": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "integer",
            "description": "ID of payment method.",
            "format": "int32",
            "nullable": true
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method.",
            "nullable": true
          },
          "paymentProviderId": {
            "type": "integer",
            "description": "ID of payment provider.",
            "format": "int32",
            "nullable": true
          },
          "paymentProvider": {
            "type": "string",
            "description": "The payment provider.",
            "nullable": true
          },
          "feeAmount": {
            "type": "number",
            "description": "Value of the fee amount.",
            "format": "decimal",
            "nullable": true
          },
          "feeType": {
            "type": "string",
            "description": "Fee type.",
            "nullable": true
          },
          "fromAmount": {
            "type": "number",
            "description": "Value from the amount of withdrawal.",
            "format": "decimal",
            "nullable": true
          },
          "toAmount": {
            "type": "number",
            "description": "Value to the amount of withdrawal.",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Withdrawal fee configuration"
      },
      "WithdrawalRequestBonusInfo": {
        "type": "object",
        "properties": {
          "bonusIncentiveId": {
            "type": "integer",
            "description": "Bonus incentive Id",
            "format": "int32"
          },
          "bonusIncentiveFriendlyName": {
            "type": "string",
            "description": "Bonus incentive friendly name",
            "nullable": true
          },
          "bonusIncentiveFriendlyDescription": {
            "type": "string",
            "description": "Bonus incentive friendly description",
            "nullable": true
          },
          "bonusIncentiveTermsAndConditions": {
            "type": "string",
            "description": "Bonus incentive terms and conditions",
            "nullable": true
          },
          "bonusMultiBonusChosen": {
            "type": "boolean",
            "description": "Is multi-choice bonus chosen"
          },
          "playerBonusContextId": {
            "type": "integer",
            "description": "Player bonus incentive context Id",
            "format": "int32"
          },
          "productTypeId": {
            "type": "integer",
            "description": "Product type Id",
            "format": "int32",
            "nullable": true
          },
          "bonusGroupId": {
            "type": "integer",
            "description": "Bonus group Id",
            "format": "int32",
            "nullable": true
          },
          "bonusAmountFixedSameForAll": {
            "type": "number",
            "description": "Bonus fixed amount for all currencies",
            "format": "decimal",
            "nullable": true
          },
          "bonusAmountFixedPerCurrency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BonusAmountPerCurrency"
            },
            "description": "Bonus fixed amount by currency",
            "nullable": true
          },
          "bonusAmountPercentage": {
            "type": "number",
            "description": "Bonus amount percentage",
            "format": "decimal",
            "nullable": true
          },
          "bonusPercentageUpToMaxAmountSameForAll": {
            "type": "number",
            "description": "Bonus percentage of amount for all currencies",
            "format": "decimal",
            "nullable": true
          },
          "bonusPercentageUpToMaxAmountPerCurrency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BonusAmountPerCurrency"
            },
            "description": "Bonus percentage of amount by currency",
            "nullable": true
          },
          "awardingConditionWithdrawalRequestAmountSameForAllMin": {
            "type": "number",
            "description": "Awarding condition withdrawal request min amount for all currencies",
            "format": "decimal",
            "nullable": true
          },
          "awardingConditionWithdrawalRequestAmountSameForAllMax": {
            "type": "number",
            "description": "Awarding condition withdrawal request max amount for all currencies",
            "format": "decimal",
            "nullable": true
          },
          "awardingConditionWithdrawalRequestMinMaxAmountsPerCurrency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinMaxAmountData"
            },
            "description": "Awarding condition withdrawal request min max amounts per currency",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "ApiKey_PG": {
        "type": "apiKey",
        "name": "X-API-Key",
        "in": "header"
      },
      "JwtBearer_PG": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}